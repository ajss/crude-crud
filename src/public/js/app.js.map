{"version":3,"sources":["app.js","helper.js","model.js","module.js","form.js","file.js","map.js","list.js","layout.js","strat.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznnzlfile":"app.js","sourcesContent":["Crude = {\n    Models: {},\n    Views: {},\n    Collections: {},\n\n    /**\n     * Event agregator\n     * @type Object\n     */\n    vent: _.extend({}, Backbone.Events),\n\n    /**\n     * Translations\n     * @type Object\n     */\n    trans: {},\n\n    /**\n     * Data\n     * @type Object\n     */\n    data: {},\n};\n\napp = new Backbone.Marionette.Application();\n\napp.addInitializer(function(options)\n{\n    Backbone.history.start();\n});\n\n$(function()\n{\n    app.start();\n});\n\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n});\n","\n/**\n * Get data from Crude.data\n * @param  string key\n * @param  mixed  defaultValue\n * @return mixed\n */\nCrude.getData = function(key, defaultValue)\n{\n    if (_.isUndefined('undefined'))\n        defaultValue = null;\n\n    if (_.isUndefined(this.data[key]))\n        return defaultValue;\n\n    return this.data[key];\n};\n\n/**\n * Get trans from Crude.trans\n * @param  string key\n * @param  string secondKey\n * @return mixed\n */\nCrude.getTrans = function(key, secondKey)\n{\n    if (_.isUndefined(secondKey)) {\n        if (_.isUndefined(this.trans[key]))\n            return key;\n\n        return this.trans[key];\n    }\n\n    if (_.isUndefined(this.trans[key][secondKey]))\n        return String(key) + String(secondKey);\n\n    return this.trans[key][secondKey];\n};\n\n/**\n * Show alert\n * @param {string} type - info / danger / warning / success\n * @param {string} msg\n */\nCrude.showAlert = function (type, msg)\n{\n    if (String(msg) == '')\n        return;\n\n    if (! jQuery.inArray( type, ['info', 'danger', 'warning', 'success'] ))\n        type = 'info';\n\n    var template = _.template($('#crude_alertTemplate').html());\n    $('#crude_alertContainer').append(template({ type: type, msg: msg }));\n};\n\n/**\n * Clears all messages that were shown\n */\nCrude.clearAllAlerts = function()\n{\n    $('#crude_alertContainer').find('#alertList').empty();\n},\n\n/**\n * Short for error alert\n */\nCrude.showError = function (msg)\n{\n    Crude.showAlert('danger', msg);\n};\n\n\n/**\n * Show modal\n * @param  {string} title\n * @param  {string} content\n * @param  {array} btnList\n * @return {JQuery Modal}\n */\nCrude.showModal = function (title, content, btnList)\n{\n    if(title == '')\n        title = '&nbsp;';\n\n    var template = _.template($('#crude_modalTemplate').html());\n\n    $('#crude_modalContainer').html(template({\n        title: title,\n        content: content,\n        btnList: btnList\n    }));\n\n    var $modal = $('#crude_modalContainer').find('#modalFade');\n    var $footer = $modal.find('.modal-footer');\n    $modal.modal('show');\n\n    $modal.on(\"shown.bs.modal\", function(event)\n    {\n        $modal.find('.btn:first').focus();\n    });\n\n    $modal.on('hidden.bs.modal', function (event)\n    {\n        $modal.off('hidden.bs.modal');\n        $modal.remove();\n    });\n\n    return $modal;\n};\n\n/**\n * Get values from input list\n * @param  {JQuery object collection} inputList\n * @return {array}\n */\nCrude.getFormValues = function (inputList)\n{\n    var values = {};\n\n    inputList.each(function() {\n        var $this = $(this);\n\n        values[$this.data('attr')] = $this.attr('type') == 'checkbox'\n            ? $this.is(':checked')\n            : $this.val();\n    });\n\n    return values;\n};\n\n/**\n * Get attribute label from 'validation.attributes' trans\n * @param  {string} attr - attribute name\n * @return {string}      - label\n */\nCrude.getAttrName = function (attr)\n{\n    return Crude.getTrans('validation.attributes', attr);\n};\n\n/**\n * Render input\n * @param  {object} setup\n * @param  {string} attr    - attribute name\n * @param  {object} model   - model data\n * @return {HTML}\n */\nCrude.renderInput = function (type, attr, model)\n{\n    var defaultName = '#crude_textInputTemplate';\n    var templateName = _.isUndefined(type)\n        ? defaultName\n        : '#crude_' + type + 'InputTemplate';\n\n    var templateScript = $(templateName);\n    if (templateScript.lenght == 0)\n        templateScript = $(defaultName);\n\n    var template = _.template($(templateName).html());\n\n    return template({ attr: attr, model: model });\n};\n","Crude.Models.Base = Backbone.Model.extend(\n{\n    parse: function(response, options)\n    {\n        return response.data && response.data.model\n            ? response.data.model       // after model update\n            : response;                 // after fetch / reset collection\n    },\n\n    getLatLngObject: function()\n    {\n        return {\n            lat: parseFloat(this.get('lat')),\n            lng: parseFloat(this.get('lng'))\n        };\n    }\n});\n\nCrude.Collections.Base = Backbone.Collection.extend(\n{\n    sort: {\n        attr: 'id',\n        order: 'asc'\n    },\n\n    pagination: {\n        page: 1,\n        numRows: 20,\n        numPages: 1,\n        count: 0,\n    },\n\n    search: {\n        attr: 'id',\n        value: ''\n    },\n\n    changeSortOptions: function (attr)\n    {\n        if (this.sort.attr == attr) {\n            this.sort.order = this.sort.order == 'asc' ? 'desc' : 'asc';\n            return;\n        }\n\n        this.sort.attr = attr;\n        this.sort.order = 'asc';\n    },\n\n    fetchWithOptions: function ()\n    {\n        return this.fetch({data: {\n            sortAttr: this.sort.attr,\n            sortOrder: this.sort.order,\n            page: this.pagination.page,\n            numRows: this.pagination.numRows,\n            searchAttr: this.search.attr,\n            searchValue: this.search.value\n        }});\n    },\n\n    parse: function(response, options)\n    {\n        if(! response.data)\n            return response;\n\n        if(response.data.sort)\n            this.sort = response.data.sort;\n        if(response.data.pagination)\n            this.pagination = response.data.pagination;\n        if(response.data.search)\n            this.search = response.data.search;\n\n        if(response.data.collection)\n            return response.data.collection;\n    }\n});\n\nCrude.Models.Setup = Backbone.Model.extend(\n{\n    idAttribute: 'name',\n    defaults:\n    {\n        name: null,\n        title: '',\n        column: [],\n        addForm: [],\n        editForm: [],\n        inputType: [],\n        actions: [],\n        deleteOption: true,\n        editOption: true,\n        addOption: true,\n        modelDefaults: [],\n        config: [],\n\n        actionToTrigger: []\n    },\n\n    getName: function ()\n    {\n        return this.get('name');\n    },\n\n    config: function (attr)\n    {\n        var config = this.get('config');\n        return config[attr];\n    },\n\n    apiRoute: function ()\n    {\n        return '/' + this.config('routePrefix') + '/api/' + this.getName();\n    },\n\n    autocompleteRoute: function(url)\n    {\n        return '/' + this.config('routePrefix') + '/autocomplete/' + url;\n    },\n\n    filesRoute: function (url)\n    {\n        return '/' + this.config('routePrefix') + '/files/' + url;\n    },\n\n    containerId: function ()\n    {\n        return 'crudeSetup_' + this.getName();\n    },\n\n    getNewCollection: function ()\n    {\n        var apiRoute = this.apiRoute();\n\n        var model = Crude.Models.Base.extend({\n            urlRoot: apiRoute\n        });\n        var collection = Crude.Collections.Base.extend({\n            model: model,\n            url: apiRoute\n        });\n\n        return new collection;\n    },\n\n    getNewModel: function ()\n    {\n        var apiRoute = this.apiRoute();\n\n        var model = Crude.Models.Base.extend({\n            urlRoot: apiRoute\n        });\n\n        return new model;\n    },\n\n    isActionAvailable: function (action)\n    {\n        return _.indexOf(this.get('actions'), action) != -1;\n    },\n\n    getNextAction: function (action)\n    {\n        var index = _.indexOf(this.get('actions'), action) + 1;\n        var next = this.get('actions')[index];\n        return _.isUndefined(next) ? '' : next;\n    },\n\n    triggerAction: function (actionToTrigger, model)\n    {\n        if (! _.isArray(actionToTrigger))\n            actionToTrigger = [actionToTrigger];\n\n        this.set('actionToTrigger', actionToTrigger);\n        Crude.vent.trigger('action_end', this.getName());\n        this.triggerNextAction(model);\n    },\n\n    /**\n     * Trigger next action\n     */\n    triggerNextAction: function (model)\n    {\n        Crude.vent.trigger('item_selected');\n\n        var actionToTrigger = this.get('actionToTrigger');\n        if (actionToTrigger.length == 0) {\n            this.triggerCancel();\n            return;\n        }\n\n        var action = actionToTrigger[0];\n        actionToTrigger.shift();\n        Crude.vent.trigger('action_end', this.getName());\n        Crude.vent.trigger('action_' + action, this.getName(), model);\n    },\n\n    triggerCancel: function ()\n    {\n        Crude.vent.trigger('action_end', this.getName());\n        Crude.vent.trigger('action_update', this.getName());\n    },\n});\n","Crude.Views.Module = Backbone.Marionette.ItemView.extend(\n{\n    tagName: 'div',\n    moduleName: '',\n\n    ui: {\n        save: '#save',\n        cancel: '#cancel',\n        input: '.input'\n    },\n\n    events: {\n        'click @ui.save': 'save',\n        'click @ui.cancel': 'cancel'\n    },\n\n    initialize: function (options)\n    {\n        this.moduleInitialize(options);\n    },\n\n    moduleInitialize: function (options)\n    {\n        this.setup = options.setup;\n        this.model = this.setup.getNewModel();\n\n        this.listenTo(Crude.vent, 'action_' + this.moduleName, this.onAction);\n        this.listenTo(Crude.vent, 'action_end', this.onActionEnd);\n    },\n\n    serializeData: function ()\n    {\n        return {\n            model: this.model.toJSON(),\n            setup: this.setup.toJSON()\n        };\n    },\n\n    onActionEnd: function (setupName)\n    {\n        if (this.setup.getName() == setupName)\n            this.slideUp();\n    },\n\n    onAction: function (setupName, model)\n    {\n        if (this.setup.getName() == setupName)\n            this.setNewModel(model);\n    },\n\n    setNewModel: function (model)\n    {\n        this.$el.parent().slideDown(100);\n        this.model = model;\n        this.render();\n    },\n\n    slideUp: function ()\n    {\n        this.$el.parent().slideUp(100);\n    },\n\n    cancel: function ()\n    {\n        this.setup.triggerCancel();\n    },\n\n    saveModel: function (response)\n    {\n        this.model\n            .save()\n            .done(function(response) {\n                if ('message' in  response)\n                    Crude.showAlert('success', response.message);\n\n                this.setup.triggerNextAction(this.model);\n            }.bind(this))\n            .fail(function(response) {\n                var responseTextJSON = JSON.parse(response.responseText);\n\n                if (response.status == 422) {\n                    Crude.showError(_.values(responseTextJSON).join('<br>'));\n                }\n\n                if (response.status == 403) {\n                    Crude.showError(responseTextJSON.error.message);\n                    this.setup.triggerCancel();\n                }\n            }.bind(this));\n    }\n});\n","Crude.Views.FormModule = Crude.Views.Module.extend(\n{\n    template: '#crude_formTemplate',\n    moduleName: 'form',\n\n    ui: {\n        save: '#save',\n        cancel: '#cancel',\n        input: '.input',\n        autocomplete: '.autocomplete',\n        datetimepicker: '.datetimepicker',\n    },\n\n    onRender: function ()\n    {\n        this.bindAutocomplete();\n        this.bindDatepicker();\n    },\n\n    save: function ()\n    {\n        var data = Crude.getFormValues(this.ui.input);\n        this.model.set(data);\n\n        this.saveModel();\n    },\n\n    bindAutocomplete: function ()\n    {\n        var setup = this.setup;\n        var model = this.model;\n        this.ui.autocomplete.each(function ()\n        {\n            var $el = $(this);\n            var $valueEl = $($el.siblings('.autocompleteValue')[0]);\n            var name = setup.getName();\n            var attr = $el.data('attr');\n\n            $.post(\n                setup.autocompleteRoute('label'),\n                {\n                    crudeName: name,\n                    attr: attr,\n                    value: model.get(attr)\n                },\n                function (response) {\n                    $el.val(response);\n                }\n            );\n\n            var updateAutocompleteValues = function (el, valueEl)\n            {\n                $el.val(el);\n                $valueEl.val(valueEl);\n                $valueEl.trigger('change');\n                return;\n            };\n\n            $el.autocomplete({\n                source: setup.autocompleteRoute('get/' + name + '/' + attr),\n                change: function(event, ui)\n                {\n                    if ($el.val() == '')\n                        $valueEl.val('');\n                    $valueEl.trigger('change');\n                },\n                response: function(event, ui) {\n                    Crude.data.autocomplete = ui.content;\n                },\n                close: function(event, ui) {\n                    var selected = _.findWhere(Crude.data.autocomplete, {label: $el.val()});\n\n                    if (_.isUndefined(selected))\n                        return updateAutocompleteValues('', '');\n\n                    updateAutocompleteValues(selected.label, selected.id);\n                }\n            });\n        });\n    },\n\n\n\n    bindDatepicker: function ()\n    {\n        this.ui.datetimepicker.datetimepicker({\n            language: 'pl',\n            format: 'YYYY-MM-DD hh:mm:00',\n            pickerPosition: \"bottom-left\",\n            pickSeconds: true,\n            icons: {\n                time: \"fa fa-clock-o\",\n                date: \"fa fa-calendar\",\n                up: \"fa fa-arrow-up\",\n                down: \"fa fa-arrow-down\"\n            }\n        });\n    }\n});\n","Crude.Views.FileModule = Crude.Views.Module.extend(\n{\n    template: '#crude_fileTemplate',\n    moduleName: 'file',\n\n    dropzone: '',\n    uploadSuccessfull: true,\n    errorMesssages: [],\n\n    ui: {\n        save: '#save',\n        cancel: '#cancel',\n        uploadFileDropzone: '#upload_file_dropzone'\n    },\n\n    save: function()\n    {\n        this.dropzone.processQueue();\n    },\n\n    onRender: function()\n    {\n        var that = this;\n        this.ui.uploadFileDropzone.dropzone({\n            headers: {\n                'X-CSRF-Token': $('meta[name=\"csrf-token\"]').attr('content')\n            },\n            url: that.setup.filesRoute('upload'),\n            previewTemplate: $('#crude_dropzoneTemplate').html(),\n            maxFiles: 10,\n            parallelUploads: 10,\n            uploadMultiple: true,\n            autoProcessQueue: false,\n            init: function()\n            {\n                that.dropzone = this;\n\n                this.on(\"success\", function(file, response)\n                {\n                    if (! response.success) {\n                        that.uploadSuccessfull = false;\n                        that.errorMessages = response.errors.file;\n                        return;\n                    }\n                    that.setup.triggerNextAction(that.model);\n                });\n\n                this.on(\"queuecomplete\", function()\n                {\n                    if (! that.uploadSuccessfull) {\n                        _.each(that.errorMessages, function(error){\n                            that.dropzone.removeAllFiles();\n                            Crude.showError(error);\n                        });\n\n                        that.errorMessages = [];\n                        return;\n                    }\n\n                    that.slideUp();\n                });\n\n                this.on(\"removedfile\", function(file) {\n                    if (file.hasOwnProperty('serverPath')){\n                        $.ajax({\n                            dataType: \"json\",\n                            type: 'delete',\n                            url: that.setup.filesRoute('delete'),\n                            data: {\n                                file_path   : file.serverPath,\n                                file_log_id : file.fileLogId\n                            },\n                            success: function(response){\n                                that.model = response.model;\n                                that.setup.triggerNextAction(that.model);\n                            }\n                        });\n                    }\n                });\n\n                _.each(that.model.get('files'), function(file, key) {\n                    var dzFile = {\n                        name: file.file_original_name,\n                        thumb: file.path,\n                        serverPath: file.path,\n                        fileLogId: file.file_log_id\n                    };\n                    that.dropzone.emit(\"addedfile\", dzFile);\n                    that.dropzone.createThumbnailFromUrl(dzFile, dzFile.serverPath);\n\n                    var existingFileCount = 1; // The number of files already uploaded\n                    that.dropzone.options.maxFiles = that.dropzone.options.maxFiles - existingFileCount;\n                });\n            },\n            sending: function(file, xhr, formData) {\n                formData.append(\"crudeName\", that.setup.getName());\n                formData.append(\"modelId\", that.model.id);\n            },\n            maxfilesexceeded: function(file) {\n                this.removeAllFiles();\n                this.addFile(file);\n            }\n        });\n    },\n});\n","Crude.Views.MapModule = Crude.Views.Module.extend(\n{\n    template: '#crude_mapTemplate',\n    moduleName: 'map',\n\n    map: null,\n    geocoder: null,\n    selectedLocation: null,\n\n    ui: {\n        save: '#save',\n        cancel: '#cancel',\n        input: '.input',\n        'mapContainer': '#mapContainer',\n        'info': '#info',\n        'position': '#position',\n        'search': '#search',\n    },\n\n    onRender: function ()\n    {\n        this.initMap();\n    },\n\n    save: function ()\n    {\n        this.saveModel();\n    },\n\n    initMap: function () {\n        this.map = new google.maps.Map(document.getElementById('mapContainer'), {\n            center: this.model.getLatLngObject(),\n            zoom: 6\n        });\n        var marker = new google.maps.Marker({\n            map: this.map,\n            position: this.model.getLatLngObject(),\n        });\n\n        this.showSelectedLocation();\n\n        this.map.addListener('click', function(event) {\n            this.model.set('lat', event.latLng.lat());\n            this.model.set('lng', event.latLng.lng());\n            this.showSelectedLocation();\n\n            marker.setPosition(this.model.getLatLngObject());\n        }.bind(this));\n\n        this.bindSearch();\n    },\n\n    showSelectedLocation: function()\n    {\n        this.ui.position.html(this.model.get('lat') + ' x ' + this.model.get('lng'));\n\n        var geocoder = new google.maps.Geocoder;\n\n        geocoder.geocode({'location': this.model.getLatLngObject()}, function(results, status) {\n            this.ui.info.html('');\n\n            if (status !== google.maps.GeocoderStatus.OK)\n                return;\n\n            this.ui.info.html(results[0].formatted_address);\n            this.model.set('address', results[0].formatted_address);\n        }.bind(this));\n    },\n\n    /**\n     * Example from https://developers.google.com/maps/documentation/javascript/examples/places-searchbox\n     */\n    bindSearch: function()\n    {\n        var input = this.ui.search[0];\n        var map = this.map;\n\n        var searchBox = new google.maps.places.SearchBox(input);\n        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n        map.addListener('bounds_changed', function() {\n            searchBox.setBounds(map.getBounds());\n        }.bind(this));\n\n        var markers = [];\n        // Listen for the event fired when the user selects a prediction and retrieve\n        // more details for that place.\n        searchBox.addListener('places_changed', function() {\n            var places = searchBox.getPlaces();\n\n            if (places.length == 0) {\n                return;\n            }\n\n            // Clear out the old markers.\n            markers.forEach(function(marker) {\n                marker.setMap(null);\n            });\n            markers = [];\n\n            // For each place, get the icon, name and location.\n            var bounds = new google.maps.LatLngBounds();\n            places.forEach(function(place) {\n                var icon = {\n                    url: place.icon,\n                    size: new google.maps.Size(71, 71),\n                    origin: new google.maps.Point(0, 0),\n                    anchor: new google.maps.Point(17, 34),\n                    scaledSize: new google.maps.Size(25, 25)\n                };\n\n                // Create a marker for each place.\n                markers.push(new google.maps.Marker({\n                    map: map,\n                    icon: icon,\n                    title: place.name,\n                    position: place.geometry.location\n                }));\n\n                if (place.geometry.viewport) {\n                    // Only geocodes have viewport.\n                    bounds.union(place.geometry.viewport);\n                } else {\n                    bounds.extend(place.geometry.location);\n                }\n            });\n            map.fitBounds(bounds);\n        });\n    },\n});\n","Crude.Views.ListItem = Backbone.Marionette.ItemView.extend(\n{\n    template: '#crude_listItemTemplate',\n    tagName: 'tr',\n\n    className: function ()\n    {\n        return Crude.data.selectedItem == this.model.get('id') ? 'active' : '';\n    },\n\n    ui: {\n        action: '.action',\n        delete: '#delete'\n    },\n\n    events: {\n        'click @ui.action': 'action',\n        'click @ui.delete': 'delete'\n    },\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n        this.listenTo(Crude.vent, 'item_selected', this.itemSelected);\n    },\n\n    serializeData: function ()\n    {\n        return {\n            model: this.model,\n            setup: this.setup\n        };\n    },\n\n    action: function (event)\n    {\n        Crude.data.selectedItem = this.model.get('id');\n        var action = $(event.target).data('action');\n        this.setup.triggerAction(action, this.model);\n    },\n\n    itemSelected: function (setupName)\n    {\n        if (this.setup.getName() != setupName)\n            return;\n\n        if (this.model.get('id') == Crude.data.selectedItem)\n            this.$el.addClass('active');\n        else\n            this.$el.removeClass('active');\n    },\n\n    delete: function ()\n    {\n        $modal = Crude.showModal(\n            Crude.getTrans('crude.confirm_delete', 'title'),\n            Crude.getTrans('crude.confirm_delete', 'content'),\n            {\n                cancel: Crude.getTrans('crude.confirm_delete', 'cancel'),\n                delete: Crude.getTrans('crude.confirm_delete', 'confirm')\n            }\n        );\n\n        $modal.find('[data-key=\"delete\"]').bind('click', function (event)\n        {\n            this.model.destroy({wait: true})\n                .done(function(response) {\n                    if ('message' in  response)\n                        Crude.showAlert('success', response.message);\n\n                    $modal.modal('hide');\n                }.bind(this))\n                .fail(function(response) {\n                    var responseTextJSON = JSON.parse(response.responseText);\n\n                    if (response.status == 422) {\n                        errors = _.values(responseTextJSON).join('<br>');\n                        Crude.showAlert('danger', errors);\n                    }\n\n                    if (response.status == 403)\n                        Crude.showAlert('danger', responseTextJSON.error.message);\n\n                    $modal.modal('hide');\n                    this.setup.triggerCancel();\n                }.bind(this));\n        }.bind(this));\n\n    },\n});\n\nCrude.Views.ListEmpty = Backbone.Marionette.ItemView.extend(\n{\n    template: '#crude_listEmptyTemplate',\n    tagName: 'tr',\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n    },\n\n    serializeData: function ()\n    {\n        return {\n            setup: this.setup\n        };\n    },\n});\n\nCrude.Views.List = Backbone.Marionette.CompositeView.extend(\n{\n    template: '#crude_listTemplate',\n    childView: Crude.Views.ListItem,\n    emptyView: Crude.Views.ListEmpty,\n    childViewContainer: '#childViewContainer',\n    tagName: 'table',\n    className: 'table table-hover',\n\n    ui: {\n        add: '#add',\n        sort: '.sort',\n\n        changeNumRows: '.changeNumRows',\n\n        changePage: '.changePage',\n\n        changeSearchAttr: '.changeSearchAttr',\n        searchValue: '#searchValue',\n        search: '#search',\n        selectedSearchAttr: '#selectedSearchAttr',\n        clearSearch: '#clearSearch'\n    },\n\n    events: {\n        'click @ui.add': 'add',\n        'click @ui.sort': 'sort',\n        'click @ui.changeNumRows': 'changeNumRows',\n        'click @ui.changePage': 'changePage',\n        'click @ui.changeSearchAttr': 'changeSearchAttr',\n        'click @ui.search': 'search',\n        'click @ui.clearSearch': 'clearSearch'\n    },\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n\n        this.collection = this.setup.getNewCollection();\n\n        this.updateList();\n        this.listenTo(Crude.vent, 'action_update', this.updateThisList);\n    },\n\n    childViewOptions: function ()\n    {\n        return {\n            setup: this.setup\n        };\n    },\n\n    serializeData: function ()\n    {\n        return {\n            setup: this.setup,\n            sort: this.collection.sort,\n            pagination: this.collection.pagination,\n            search: this.collection.search\n        };\n    },\n\n    add: function ()\n    {\n        Crude.data.selectedItem = null;\n        this.setup.triggerAction(_.clone(this.setup.get('actions')), this.setup.getNewModel());\n    },\n\n    sort: function (event)\n    {\n        var $target = $(event.target);\n        if (! $target.hasClass('sort'))\n            $target = $target.parents('.sort');\n\n        this.collection.changeSortOptions($target.data('attr'));\n        this.updateList();\n    },\n\n    changeNumRows: function (event)\n    {\n        var $target = $(event.target);\n        this.collection.pagination.numRows = $target.html();\n        this.updateList();\n    },\n\n    changePage: function ()\n    {\n        var $target = $(event.target);\n        this.collection.pagination.page = $target.html();\n        this.updateList();\n    },\n\n    changeSearchAttr: function (event)\n    {\n        var $target = $(event.target);\n\n        this.collection.search.attr = $target.data('attr');\n        this.ui.selectedSearchAttr.html($target.html());\n    },\n\n    search: function ()\n    {\n        this.collection.search.value = this.ui.searchValue.val();\n        this.updateList();\n    },\n\n    clearSearch: function ()\n    {\n        this.collection.search.attr = 'id',\n        this.collection.search.value = '';\n        this.updateList();\n    },\n\n    updateList: function ()\n    {\n        this.collection.fetchWithOptions().done(function ()\n        {\n            Crude.data.selectedItem = null;\n            this.render();\n        }.bind(this));\n    },\n\n    updateThisList: function (setupName)\n    {\n        if (this.setup.getName() == setupName)\n            this.updateList();\n    },\n});\n","Crude.Views.Layout = Backbone.Marionette.LayoutView.extend(\n{\n    template: '#crude_layoutTemplate',\n    tagName:  'div',\n    className: 'container m-lg-t',\n\n    firstRender: true,\n    title: '',\n\n    regions: {\n        'list': '#listRegion',\n        'form': '#formRegion',\n        'map': '#mapRegion',\n        'file': '#fileRegion'\n    },\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n    },\n\n    serializeData: function()\n    {\n        return {\n            title: this.setup.get('title')\n        };\n    },\n\n    onRender: function()\n    {\n        if (this.firstRender) {\n            var setup = this.setup;\n\n            this.list.show(\n                new Crude.Views.List({ setup: setup })\n            );\n\n            if (this.setup.isActionAvailable('form'))\n                this.form.show(\n                    new Crude.Views.FormModule({ setup: setup })\n                );\n\n            if (this.setup.isActionAvailable('file'))\n                this.file.show(\n                    new Crude.Views.FileModule({ setup: setup })\n                );\n\n            if (this.setup.isActionAvailable('map'))\n                this.map.show(\n                    new Crude.Views.MapModule({ setup: setup })\n                );\n\n            this.firstRender = false;\n        }\n\n        // initialize all tooltips on a page\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    },\n});\n","$(function()\r\n{\r\n    var crudeSetup = Crude.getData('crudeSetup', []);\r\n    var $crudeContainer = $('#crudeContainer');\r\n\r\n    _.each(crudeSetup, function(setup)\r\n    {\r\n        var setup = new Crude.Models.Setup(setup);\r\n\r\n        $crudeContainer.append(\r\n            '<div id=\"' + setup.containerId() + '\" class=\"container\"></div>'\r\n        );\r\n\r\n        var view = new Crude.Views.Layout({\r\n            el: '#' + setup.containerId(),\r\n            setup: setup\r\n        });\r\n        view.render();\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}
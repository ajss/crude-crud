{"version":3,"sources":["app.js","helper.js","model.js","list.js","strat.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntfile":"app.js","sourcesContent":["Crude = {\r\n    Models: {},\r\n    Views: {},\r\n    Collections: {},\r\n\r\n    /**\r\n     * Event agregator\r\n     * @type Object\r\n     */\r\n    vent: _.extend({}, Backbone.Events),\r\n\r\n    /**\r\n     * Translations\r\n     * @type Object\r\n     */\r\n    trans: {},\r\n\r\n    /**\r\n     * Data\r\n     * @type Object\r\n     */\r\n    data: {},\r\n};\r\n\r\napp = new Backbone.Marionette.Application();\r\n\r\napp.addInitializer(function(options)\r\n{\r\n    Backbone.history.start();\r\n});\r\n\r\n$(function()\r\n{\r\n    app.start();\r\n});\r\n","\r\n/**\r\n * Get data from Crude.data\r\n * @param  string key\r\n * @param  mixed  defaultValue\r\n * @return mixed\r\n */\r\nCrude.getData = function(key, defaultValue)\r\n{\r\n    if (_.isUndefined('undefined'))\r\n        defaultValue = null;\r\n\r\n    if (_.isUndefined(this.data[key]))\r\n        return defaultValue;\r\n\r\n    return this.data[key];\r\n};\r\n\r\n/**\r\n * Get trans from Crude.trans\r\n * @param  string key\r\n * @param  string secondKey\r\n * @return mixed\r\n */\r\nCrude.getTrans = function(key, secondKey)\r\n{\r\n    if (_.isUndefined(secondKey)) {\r\n        if (_.isUndefined(this.trans[key]))\r\n            return key;\r\n\r\n        return this.trans[key];\r\n    }\r\n\r\n    if (_.isUndefined(this.trans[key][secondKey]))\r\n        return String(key) + String(secondKey);\r\n\r\n    return this.trans[key][secondKey];\r\n};\r\n\r\n/**\r\n * Show alert\r\n * @param {string} type - info / danger / warning / success\r\n * @param {string} msg\r\n */\r\nCrude.showAlert = function (type, msg)\r\n{\r\n    if (String(msg) == '')\r\n        return;\r\n\r\n    if (! jQuery.inArray( type, ['info', 'danger', 'warning', 'success'] ))\r\n        type = 'info';\r\n\r\n    var template = _.template($('#alertTemplate').html());\r\n    $('#alertContainer').find('#alertList').append(template({ type: type, msg: msg }));\r\n};\r\n\r\n/**\r\n * Clears all messages that were shown\r\n */\r\nCrude.clearAllAlerts = function()\r\n{\r\n    $('#alertContainer').find('#alertList').empty();\r\n},\r\n\r\n/**\r\n * Show modal\r\n * @param  {string} title\r\n * @param  {string} content\r\n * @param  {array} btnList\r\n * @return {JQuery Modal}\r\n */\r\nCrude.showModal = function (title, content, btnList)\r\n{\r\n    if(title == '')\r\n        title = '&nbsp;';\r\n\r\n    var template = _.template($('#modalTemplate').html());\r\n\r\n    $('#modalContainer').html(template({\r\n        title: title,\r\n        content: content,\r\n        btnList: btnList\r\n    }));\r\n\r\n    var $modal = $('#modalFade');\r\n    var $footer = $modal.find('.modal-footer');\r\n    $modal.modal('show');\r\n\r\n    $modal.on(\"shown.bs.modal\", function(event)\r\n    {\r\n        $modal.find('.btn:first').focus();\r\n    });\r\n\r\n    $modal.on('hidden.bs.modal', function (event)\r\n    {\r\n        $modal.off('hidden.bs.modal');\r\n        $modal.remove();\r\n    });\r\n\r\n    return $modal;\r\n};\r\n\r\n/**\r\n * Get values from input list\r\n * @param  {JQuery object collection} inputList\r\n * @return {array}\r\n */\r\nCrude.getFormValues = function (inputList)\r\n{\r\n    var values = {};\r\n\r\n    inputList.each( function() {\r\n        var $this = $(this);\r\n\r\n        values[$this.data('attr')] = $this.attr('type') == 'checkbox'\r\n            ? $this.is(':checked')\r\n            : $this.val();\r\n    });\r\n\r\n    return values;\r\n};\r\n\r\n/**\r\n * Get attribute label from 'validation.attributes' trans\r\n * @param  {string} attr - attribute name\r\n * @return {string}      - label\r\n */\r\nCrude.getAttrName = function (attr)\r\n{\r\n    return Crude.getTrans('validation.attributes', attr);\r\n};\r\n\r\n/**\r\n * Render input\r\n * @param  {object} section\r\n * @param  {string} attr    - attribute name\r\n * @param  {object} model   - model data\r\n * @return {HTML}\r\n */\r\nCrude.renderInput = function (section, attr, model)\r\n{\r\n    var defaultName = '#textInputTemplate';\r\n\r\n    var type = section.inputType[attr];\r\n    var templateName = _.isUndefined(type)\r\n        ? defaultName\r\n        : '#' + type + 'InputTemplate';\r\n\r\n    var templateScript = $(templateName);\r\n    if (templateScript.lenght == 0)\r\n        templateScript = $(defaultName);\r\n\r\n    var template = _.template($(templateName).html());\r\n\r\n    return template({ section: section, attr: attr, model: model });\r\n};\r\n","Crude.Models.Base = Backbone.Model.extend(\r\n{\r\n    parse: function(response, options)\r\n    {\r\n        return response.data && response.data.model\r\n            ? response.data.model       // after model update\r\n            : response;                 // after fetch / reset collection\r\n    },\r\n\r\n    getLatLngObject: function()\r\n    {\r\n        return {\r\n            lat: parseFloat(this.get('lat')),\r\n            lng: parseFloat(this.get('lng'))\r\n        };\r\n    }\r\n});\r\n\r\nCrude.Collections.Base = Backbone.Collection.extend(\r\n{\r\n    sort: {\r\n        attr: 'id',\r\n        order: 'asc'\r\n    },\r\n\r\n    pagination: {\r\n        page: 1,\r\n        numRows: 20,\r\n        numPages: 1,\r\n        count: 0,\r\n    },\r\n\r\n    search: {\r\n        attr: 'id',\r\n        value: ''\r\n    },\r\n\r\n    changeSortOptions: function (attr)\r\n    {\r\n        if (this.sort.attr == attr) {\r\n            this.sort.order = this.sort.order == 'asc' ? 'desc' : 'asc';\r\n            return;\r\n        }\r\n\r\n        this.sort.attr = attr;\r\n        this.sort.order = 'asc';\r\n    },\r\n\r\n    fetchWithOptions: function ()\r\n    {\r\n        return this.fetch({data: {\r\n            sortAttr: this.sort.attr,\r\n            sortOrder: this.sort.order,\r\n            page: this.pagination.page,\r\n            numRows: this.pagination.numRows,\r\n            searchAttr: this.search.attr,\r\n            searchValue: this.search.value\r\n        }});\r\n    },\r\n\r\n    parse: function(response, options)\r\n    {\r\n        if(! response.data)\r\n            return response;\r\n\r\n        if(response.data.sort)\r\n            this.sort = response.data.sort;\r\n        if(response.data.pagination)\r\n            this.pagination = response.data.pagination;\r\n        if(response.data.search)\r\n            this.search = response.data.search;\r\n\r\n        if(response.data.collection)\r\n            return response.data.collection;\r\n    }\r\n});\r\n\r\nCrude.Models.setup = Backbone.Model.extend(\r\n{\r\n    idAttribute: 'name',\r\n    defaults:\r\n    {\r\n        name: null,\r\n        column: [],\r\n        addForm: [],\r\n        editForm: [],\r\n        inputType: [],\r\n        actions: [],\r\n        deleteOption: true,\r\n        actionToTrigger: [],\r\n        config: []\r\n    },\r\n\r\n    getName: function()\r\n    {\r\n        return this.get('name');\r\n    },\r\n\r\n    config: function(attr)\r\n    {\r\n        var config = this.get('config');\r\n        return config[attr];\r\n    },\r\n\r\n    apiRoute: function()\r\n    {\r\n        return this.config('routePrefix') + '/api/' + this.getName();\r\n    },\r\n\r\n    getNewCollection: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute\r\n        });\r\n        var collection = Crude.Collections.Base.extend({\r\n            model: model,\r\n            url: apiRoute\r\n        });\r\n\r\n        return new collection;\r\n    },\r\n\r\n    getNewModel: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute\r\n        });\r\n\r\n        return new model;\r\n    },\r\n\r\n    isActionAvailable: function (action)\r\n    {\r\n        return _.indexOf(this.get('actions'), action) != -1;\r\n    },\r\n\r\n    getNextAction: function (action)\r\n    {\r\n        var index = _.indexOf(this.get('actions'), action) + 1;\r\n        var next = this.get('actions')[index];\r\n        return _.isUndefined(next) ? '' : next;\r\n    },\r\n\r\n    triggerAction: function (actionToTrigger, model)\r\n    {\r\n        if (! _.isArray(actionToTrigger))\r\n            actionToTrigger = [actionToTrigger];\r\n\r\n        this.set('actionToTrigger', actionToTrigger);\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        this.triggerNextAction(model);\r\n    },\r\n\r\n    /**\r\n     * Trigger next action\r\n     */\r\n    triggerNextAction: function (model)\r\n    {\r\n        Crude.vent.trigger('item_selected');\r\n\r\n        var actionToTrigger = this.get('actionToTrigger');\r\n        if (actionToTrigger.length == 0) {\r\n            this.triggerCancel();\r\n            return;\r\n        }\r\n\r\n        var action = actionToTrigger[0];\r\n        actionToTrigger.shift();\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        Crude.vent.trigger('action_' + action, this.getName(), model);\r\n    },\r\n\r\n    triggerCancel: function ()\r\n    {\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        Crude.vent.trigger('action_update', this.getName());\r\n    },\r\n});\r\n","Crude.Views.ListItem = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#listItemTemplate',\r\n    tagName: 'tr',\r\n\r\n    className: function ()\r\n    {\r\n        return Crude.data.selectedItem == this.model.get('id') ? 'active' : '';\r\n    },\r\n\r\n    ui: {\r\n        action: '.action',\r\n        delete: '#delete'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.action': 'action',\r\n        'click @ui.delete': 'delete'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n        this.listenTo(Crude.vent, 'item_selected', this.itemSelected);\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            model: this.model,\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    action: function (event)\r\n    {\r\n        Crude.data.selectedItem = this.model.get('id');\r\n        var action = $(event.target).data('action');\r\n        this.setup.triggerAction(action, this.model);\r\n    },\r\n\r\n    itemSelected: function (setupName)\r\n    {\r\n        if (this.setup.getName() != setupName)\r\n            return;\r\n\r\n        if (this.model.get('id') == Crude.data.selectedItem)\r\n            this.$el.addClass('active');\r\n        else\r\n            this.$el.removeClass('active');\r\n    },\r\n\r\n    delete: function ()\r\n    {\r\n        $modal = Crude.showModal(\r\n            Crude.getTrans('admin.confirm_delete', 'title'),\r\n            Crude.getTrans('admin.confirm_delete', 'content'),\r\n            {\r\n                cancel: Crude.getTrans('admin.confirm_delete', 'cancel'),\r\n                delete: Crude.getTrans('admin.confirm_delete', 'confirm')\r\n            }\r\n        );\r\n\r\n        $modal.find('[data-key=\"delete\"]').bind('click', function (event)\r\n        {\r\n            this.model.destroy({wait: true})\r\n                .done(function(response) {\r\n                    if ('message' in  response)\r\n                        Crude.showAlert('success', response.message);\r\n\r\n                    $modal.modal('hide');\r\n                }.bind(this))\r\n                .fail(function(response) {\r\n                    var responseTextJSON = JSON.parse(response.responseText);\r\n\r\n                    if (response.status == 422) {\r\n                        errors = _.values(responseTextJSON).join('<br>');\r\n                        Crude.showAlert('danger', errors);\r\n                    }\r\n\r\n                    if (response.status == 403)\r\n                        Crude.showAlert('danger', responseTextJSON.error.message);\r\n\r\n                    $modal.modal('hide');\r\n                    this.setup.triggerCancel();\r\n                }.bind(this));\r\n        }.bind(this));\r\n\r\n    },\r\n});\r\n\r\nCrude.Views.ListEmpty = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#listEmptyTemplate',\r\n    tagName: 'tr',\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n});\r\n\r\nCrude.Views.List = Backbone.Marionette.CompositeView.extend(\r\n{\r\n    template: '#listTemplate',\r\n    childView: Crude.Views.ListItem,\r\n    emptyView: Crude.Views.ListEmpty,\r\n    childViewContainer: '#childViewContainer',\r\n\r\n    ui: {\r\n        add: '#add',\r\n        sort: '.sort',\r\n\r\n        changeNumRows: '.changeNumRows',\r\n\r\n        changePage: '.changePage',\r\n\r\n        changeSearchAttr: '.changeSearchAttr',\r\n        searchValue: '#searchValue',\r\n        search: '#search',\r\n        selectedSearchAttr: '#selectedSearchAttr',\r\n        clearSearch: '#clearSearch'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.add': 'add',\r\n        'click @ui.sort': 'sort',\r\n        'click @ui.changeNumRows': 'changeNumRows',\r\n        'click @ui.changePage': 'changePage',\r\n        'click @ui.changeSearchAttr': 'changeSearchAttr',\r\n        'click @ui.search': 'search',\r\n        'click @ui.clearSearch': 'clearSearch'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n\r\n        this.collection = this.setup.getNewCollection();\r\n\r\n        this.updateList();\r\n        this.listenTo(Crude.vent, 'action_update', this.updateThisList);\r\n    },\r\n\r\n    childViewOptions: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            setup: this.setup,\r\n            sort: this.collection.sort,\r\n            pagination: this.collection.pagination,\r\n            search: this.collection.search\r\n        };\r\n    },\r\n\r\n    add: function ()\r\n    {\r\n        Crude.data.selectedItem = null;\r\n        this.setup.triggerAction(_.clone(this.setup.get('actions')), this.setup.getNewModel());\r\n    },\r\n\r\n    sort: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n        if (! $target.hasClass('sort'))\r\n            $target = $target.parents('.sort');\r\n\r\n        this.collection.changeSortOptions($target.data('attr'));\r\n        this.updateList();\r\n    },\r\n\r\n    changeNumRows: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n        this.collection.pagination.numRows = $target.html();\r\n        this.updateList();\r\n    },\r\n\r\n    changePage: function ()\r\n    {\r\n        var $target = $(event.target);\r\n        this.collection.pagination.page = $target.html();\r\n        this.updateList();\r\n    },\r\n\r\n    changeSearchAttr: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n\r\n        this.collection.search.attr = $target.data('attr');\r\n        this.ui.selectedSearchAttr.html($target.html());\r\n    },\r\n\r\n    search: function ()\r\n    {\r\n        this.collection.search.value = this.ui.searchValue.val();\r\n        this.updateList();\r\n    },\r\n\r\n    clearSearch: function ()\r\n    {\r\n        this.collection.search.attr = 'id',\r\n        this.collection.search.value = '';\r\n        this.updateList();\r\n    },\r\n\r\n    updateList: function ()\r\n    {\r\n        this.collection.fetchWithOptions().done(function ()\r\n        {\r\n            Crude.data.selectedItem = null;\r\n            this.render();\r\n        }.bind(this));\r\n    },\r\n\r\n    updateThisList: function (setupName)\r\n    {\r\n        if (this.setup.getName() == setupName)\r\n            this.updateList();\r\n    },\r\n});\r\n",""],"sourceRoot":"/source/"}
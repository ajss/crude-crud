{"version":3,"sources":["app.js","helper.js","model.js","module.js","form.js","file.js","map.js","list.js","layout.js","start.js"],"names":[],"mappingspppGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"app.js","sourcesContent":["$.ajaxSetup({\r\n    headers: {\r\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\r\n    }\r\n});\r\n\r\nCrude = {\r\n    Models: {},\r\n    Views: {},\r\n    Collections: {},\r\n\r\n    /**\r\n     * Event agregator\r\n     * @type Object\r\n     */\r\n    vent: _.extend({}, Backbone.Events),\r\n\r\n    /**\r\n     * Translations\r\n     * @type Object\r\n     */\r\n    trans: {},\r\n\r\n    /**\r\n     * Data\r\n     * @type Object\r\n     */\r\n    data: {},\r\n};\r\n\r\napp = new Backbone.Marionette.Application();\r\n\r\napp.addInitializer(function(options)\r\n{\r\n    Backbone.history.start();\r\n});\r\n\r\n$(function()\r\n{\r\n    app.start();\r\n});\r\n\r\n","\n/**\n * Get data from Crude.data\n * @param  string key\n * @param  mixed  defaultValue\n * @return mixed\n */\nCrude.getData = function(key, defaultValue)\n{\n    if (_.isUndefined(defaultValue))\n        defaultValue = null;\n\n    if (_.isUndefined(this.data[key]))\n        return defaultValue;\n\n    return this.data[key];\n};\n\n/**\n * Get trans from Crude.trans\n * @param  string key\n * @param  string secondKey\n * @return mixed\n */\nCrude.getTrans = function(key, secondKey)\n{\n    if (_.isUndefined(secondKey)) {\n        if (_.isUndefined(this.trans[key]))\n            return key;\n\n        return this.trans[key];\n    }\n\n    if (_.isUndefined(this.trans[key][secondKey]))\n        return String(key) + String(secondKey);\n\n    return this.trans[key][secondKey];\n};\n\n/**\n * Show alert\n * @param {string} type - info / danger / warning / success\n * @param {string} msg\n */\nCrude.showAlert = function (type, msg, $container)\n{\n    if (_.isUndefined($container))\n        $container = $('#crude_alertContainer');\n\n    Crude.showAlertInContainer(type, msg, $container);\n};\n\nCrude.showAlertInContainer = function (type, msg, $container)\n{\n    if (_.isUndefined($container))\n        $container = $('#crude_alertContainer');\n\n    if (String(msg) == '')\n        return;\n\n    if (! jQuery.inArray( type, ['info', 'danger', 'warning', 'success'] ))\n        type = 'info';\n\n    var template = _.template($('#crude_alertTemplate').html());\n    $container.append(template({ type: type, msg: msg }));\n};\n\n/**\n * Clears all messages that were shown\n */\nCrude.clearAllAlerts = function($container)\n{\n    if (_.isUndefined($container))\n        $container = $('#crude_alertContainer');\n\n    $container.empty();\n},\n\n/**\n * Short for error alert\n */\nCrude.showError = function (msg, $container)\n{\n    if (_.isUndefined($container))\n        $container = $('#crude_alertContainer');\n\n    Crude.showAlertInContainer('danger', msg, $container);\n};\n\n/**\n * Show modal\n * @param  {string} title\n * @param  {string} content\n * @param  {array} btnList\n * @return {JQuery Modal}\n */\nCrude.showModal = function (title, content, btnList)\n{\n    if(title == '')\n        title = '&nbsp;';\n\n    var template = _.template($('#crude_modalTemplate').html());\n\n    $('#crude_modalContainer').html(template({\n        title: title,\n        content: content,\n        btnList: btnList\n    }));\n\n    var $modal = $('#crude_modalContainer').find('#modalFade');\n    var $footer = $modal.find('.modal-footer');\n    $modal.modal('show');\n\n    $modal.on(\"shown.bs.modal\", function(event)\n    {\n        $modal.find('.btn:first').focus();\n    });\n\n    $modal.on('hidden.bs.modal', function (event)\n    {\n        $modal.off('hidden.bs.modal');\n        $modal.remove();\n    });\n\n    return $modal;\n};\n\n/**\n * Get values from input list\n * @param  {JQuery object collection} inputList\n * @return {array}\n */\nCrude.getFormValues = function (inputList)\n{\n    var values = {};\n\n    inputList.each(function() {\n        var $this = $(this);\n\n        if ($this.attr('type') == 'custom')\n            values[$this.data('attr')] = window[$this.data('method')]($this);\n        else if ($this.attr('type') == 'checkbox')\n            values[$this.data('attr')] = $this.is(':checked');\n        else if ($this.attr('type') == 'select')\n            values[$this.data('attr')] = $this.find(':selected').val();\n        else if ($this.attr('type') == 'json') {\n            values[$this.data('attr')] = JSON.parse($this.val());\n        }\n        else\n            values[$this.data('attr')] = $this.val();\n    });\n\n    return values;\n};\n\n/**\n * Get attribute label from 'validation.attributes' trans\n * @param  {string} attr - attribute name\n * @return {string}      - label\n */\nCrude.getAttrName = function (attr)\n{\n    return Crude.getTrans('validation.attributes', attr);\n};\n\n/**\n * Render input\n * @param  {model} setup\n * @param  {string} attr    - attribute name\n * @param  {object} model   - model data\n * @return {HTML}\n */\nCrude.renderInput = function (setup, attr, model)\n{\n    var defaultName = '#crude_textInputTemplate';\n    var type = setup.get('inputType')[attr];\n    var templateName = _.isUndefined(type)\n        ? defaultName\n        : '#crude_' + type + 'InputTemplate';\n\n    var templateScript = $(templateName);\n    if (templateScript.lenght == 0)\n        templateScript = $(defaultName);\n\n    var template = _.template($(templateName).html());\n\n    return template({\n        setup: setup,\n        attr: attr,\n        model: model\n    });\n};\n\nCrude.renderCell = function (setup, attr, model)\n{\n    var defaultName = '#crude_textColumFormatTemplate';\n    var format = setup.getColumnFormat(attr);\n    var templateName = '#crude_' + format.type + 'ColumnFormatTemplate';\n\n    var templateScript = $(templateName);\n    if (templateScript.lenght == 0)\n        templateScript = $(defaultName);\n\n    var template = _.template($(templateName).html());\n\n    return template({\n        setup: setup,\n        format: format,\n        attr: attr,\n        model: model\n    });\n};\n","Crude.Models.Base = Backbone.Model.extend(\r\n{\r\n    parse: function(response, options)\r\n    {\r\n        return response.data && response.data.model\r\n            ? response.data.model       // after model update\r\n            : response;                 // after fetch / reset collection\r\n    },\r\n\r\n    getLatLngObject: function()\r\n    {\r\n        return {\r\n            lat: parseFloat(this.get('lat')),\r\n            lng: parseFloat(this.get('lng'))\r\n        };\r\n    },\r\n\r\n    isCustomActionAvailable: function(action)\r\n    {\r\n        return this.get(action + 'CustomActionAvailable');\r\n    },\r\n});\r\n\r\nCrude.Collections.Base = Backbone.Collection.extend(\r\n{\r\n    sort: {\r\n        attr: 'id',\r\n        order: 'asc'\r\n    },\r\n\r\n    pagination: {\r\n        page: 1,\r\n        numRows: 20,\r\n        numPages: 1,\r\n        count: 0,\r\n    },\r\n\r\n    search: {\r\n        attr: 'id',\r\n        value: ''\r\n    },\r\n\r\n    changeSortOptions: function (attr)\r\n    {\r\n        if (this.sort.attr == attr) {\r\n            this.sort.order = this.sort.order == 'asc' ? 'desc' : 'asc';\r\n            return;\r\n        }\r\n\r\n        this.sort.attr = attr;\r\n        this.sort.order = 'asc';\r\n    },\r\n\r\n    fetchWithOptions: function ()\r\n    {\r\n        return this.fetch({data: {\r\n            sortAttr: this.sort.attr,\r\n            sortOrder: this.sort.order,\r\n            page: this.pagination.page,\r\n            numRows: this.pagination.numRows,\r\n            searchAttr: this.search.attr,\r\n            searchValue: this.search.value\r\n        }});\r\n    },\r\n\r\n    parse: function(response, options)\r\n    {\r\n        if(! response.data)\r\n            return response;\r\n\r\n        if(response.data.sort)\r\n            this.sort = response.data.sort;\r\n        if(response.data.pagination)\r\n            this.pagination = response.data.pagination;\r\n        if(response.data.search)\r\n            this.search = response.data.search;\r\n\r\n        if(response.data.collection)\r\n            return response.data.collection;\r\n    }\r\n});\r\n\r\nCrude.Models.Setup = Backbone.Model.extend(\r\n{\r\n    idAttribute: 'name',\r\n    defaults:\r\n    {\r\n        name: null,\r\n        title: '',\r\n        column: [],\r\n        columnFormat: [],\r\n        addForm: [],\r\n        editForm: [],\r\n        inputType: [],\r\n        actions: [],\r\n        deleteOption: true,\r\n        editOption: true,\r\n        addOption: true,\r\n        modelDefaults: [],\r\n        selectOptions: [],\r\n        customeActions: [],\r\n        config: [],\r\n        filters: [],\r\n        trans: [],\r\n        moduleInPopup: false,\r\n\r\n        actionToTrigger: []\r\n    },\r\n\r\n    getName: function ()\r\n    {\r\n        return this.get('name');\r\n    },\r\n\r\n    config: function (attr)\r\n    {\r\n        var config = this.get('config');\r\n        return config[attr];\r\n    },\r\n\r\n    apiRoute: function ()\r\n    {\r\n        return '/' + this.config('routePrefix') + '/api/' + this.getName();\r\n    },\r\n\r\n    autocompleteRoute: function(url)\r\n    {\r\n        return '/' + this.config('routePrefix') + '/autocomplete/' + url;\r\n    },\r\n\r\n    filesRoute: function (url)\r\n    {\r\n        return '/' + this.config('routePrefix') + '/file/' + url;\r\n    },\r\n\r\n    customActionRoute: function (action, id)\r\n    {\r\n        return '/' + this.config('routePrefix') + '/custom-action/' + this.getName() + '/' + action + '/' + id;\r\n    },\r\n\r\n    containerId: function ()\r\n    {\r\n        return 'crudeSetup_' + this.getName();\r\n    },\r\n\r\n    getColumnFormat: function(attr)\r\n    {\r\n        var columnFormat = this.get('columnFormat');\r\n\r\n        return attr in columnFormat\r\n            ? columnFormat[attr]\r\n            : {type: 'text'};\r\n    },\r\n\r\n    getNewCollection: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n        var defaults = this.get('modelDefaults');\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute,\r\n            defaults: defaults\r\n        });\r\n        var collection = Crude.Collections.Base.extend({\r\n            model: model,\r\n            url: apiRoute\r\n        });\r\n\r\n        return new collection;\r\n    },\r\n\r\n    getNewModel: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n        var defaults = this.get('modelDefaults');\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute,\r\n            defaults: defaults\r\n        });\r\n\r\n        return new model;\r\n    },\r\n\r\n    isActionAvailable: function (action)\r\n    {\r\n        return _.indexOf(this.get('actions'), action) != -1;\r\n    },\r\n\r\n    getNextAction: function (action)\r\n    {\r\n        var index = _.indexOf(this.get('actions'), action) + 1;\r\n        var next = this.get('actions')[index];\r\n        return _.isUndefined(next) ? '' : next;\r\n    },\r\n\r\n    triggerAction: function (actionToTrigger, model)\r\n    {\r\n        if (! _.isArray(actionToTrigger))\r\n            actionToTrigger = [actionToTrigger];\r\n\r\n        $('html, body').animate({\r\n            scrollTop: $('#' + this.containerId()).offset().top - 200\r\n        }, 500);\r\n\r\n        this.set('actionToTrigger', actionToTrigger);\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        this.triggerNextAction(model);\r\n    },\r\n\r\n    /**\r\n     * Trigger next action\r\n     */\r\n    triggerNextAction: function (model)\r\n    {\r\n        Crude.vent.trigger('item_selected', this.getName());\r\n\r\n        var actionToTrigger = this.get('actionToTrigger');\r\n        if (actionToTrigger.length == 0) {\r\n            this.triggerCancel();\r\n            return;\r\n        }\r\n\r\n        var action = actionToTrigger[0];\r\n        actionToTrigger.shift();\r\n        Crude.vent.trigger('action_change', this.getName());\r\n        Crude.vent.trigger('action_' + action, this.getName(), model);\r\n    },\r\n\r\n    triggerCancel: function ()\r\n    {\r\n        Crude.data.selectedItem = null;\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        Crude.vent.trigger('action_update', this.getName());\r\n    },\r\n\r\n    getAttrName: function (attr)\r\n    {\r\n        var trans = this.get('trans');\r\n\r\n        if (attr in trans)\r\n            return trans[attr];\r\n\r\n        return Crude.getAttrName(attr);\r\n    },\r\n\r\n    onAjaxFail: function(response, alertContainer)\r\n    {\r\n        if (! this.IsJsonString(response.responseText)) {\r\n            Crude.showAlert('danger', response.responseText, alertContainer);\r\n            return;\r\n        }\r\n\r\n        var responseTextJSON = JSON.parse(response.responseText);\r\n\r\n        if (response.status == 422) {\r\n            var msg = _.values(responseTextJSON).join('<br>');\r\n            Crude.showError(msg, alertContainer);\r\n        }\r\n\r\n        if (response.status == 403) {\r\n            var msg = responseTextJSON.error.message;\r\n            Crude.showError(msg, alertContainer);\r\n            this.setup.triggerCancel();\r\n        }\r\n    },\r\n\r\n    IsJsonString: function (str) {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n});\r\n","Crude.Views.Module = Backbone.Marionette.ItemView.extend(\n{\n    tagName: 'div',\n    moduleName: '',\n    formIsLocked: false,\n\n    ui: {\n        save: '#save',\n        cancel: '#cancel',\n        input: '.input',\n        loader: '#loader'\n    },\n\n    events: {\n        'click @ui.save': 'save',\n        'click @ui.cancel': 'cancel'\n    },\n\n    initialize: function (options)\n    {\n        this.moduleInitialize(options);\n    },\n\n    moduleInitialize: function (options)\n    {\n        this.setup = options.setup;\n        this.model = this.setup.getNewModel();\n\n        this.listenTo(Crude.vent, 'action_' + this.moduleName, this.onAction);\n        this.listenTo(Crude.vent, 'action_end', this.onActionEnd);\n        this.listenTo(Crude.vent, 'action_change', this.onActionChange);\n    },\n\n    serializeData: function ()\n    {\n        return {\n            model: this.model.toJSON(),\n            setup: this.setup\n        };\n    },\n\n    onRender: function ()\n    {\n        this.parentOnRender();\n    },\n\n    parentOnRender: function ()\n    {\n        // initialize all tooltips on a page\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    },\n\n    onActionEnd: function (setupName)\n    {\n        if (this.setup.getName() == setupName)\n            this.slideUp();\n    },\n\n    onActionChange: function (setupName)\n    {\n        if (this.setup.getName() == setupName)\n            this.changeUp();\n    },\n\n    onAction: function (setupName, model)\n    {\n        if (this.setup.getName() == setupName)\n            this.setNewModel(model);\n    },\n\n    setNewModel: function (model)\n    {\n        if (! this.setup.get('moduleInPopup')) {\n            this.$el.parent().slideDown(100);\n        } else {\n            this.$el.parent().show();\n            this.$el.parents('#moduleModal').modal('show');\n        }\n\n        this.model = model;\n        this.render();\n    },\n\n    alertContainer: function ()\n    {\n        return $('#' + this.setup.containerId()).find('#alertContainer');\n    },\n\n    clearAllAlerts: function ()\n    {\n        Crude.clearAllAlerts(this.alertContainer());\n    },\n\n    showError: function (msg)\n    {\n        Crude.showError(msg, this.alertContainer());\n    },\n\n    showMessage: function (msg)\n    {\n        Crude.showAlert('success', msg, this.alertContainer());\n    },\n\n    slideUp: function ()\n    {\n        this.clearAllAlerts();\n\n        if (this.setup.get('moduleInPopup')) {\n            this.$el.parent().hide();\n            this.$el.parents('#moduleModal').modal('hide');\n            return;\n        }\n\n        this.$el.parent().slideUp(100);\n    },\n\n    changeUp: function ()\n    {\n        this.$el.parent().hide();\n    },\n\n    cancel: function ()\n    {\n        this.setup.triggerCancel();\n    },\n\n    saveModel: function (response)\n    {\n        if (this.formIsLocked)\n            return;\n\n        this.clearAllAlerts();\n        $(':focus').blur();\n        this.lockForm();\n\n        this.model.save()\n            .done(function (response) { this.onSaveSuccess(response); }.bind(this))\n            .fail(function (response) { this.onSaveFail(response); }.bind(this));\n    },\n\n    onSaveSuccess: function (response)\n    {\n        this.unlockForm();\n\n        if ('message' in  response)\n            this.showMessage(response.data.message);\n\n        this.setup.triggerNextAction(this.model);\n    },\n\n    onSaveFail: function (response)\n    {\n        this.unlockForm();\n\n        this.setup.onAjaxFail(response, this.alertContainer());\n    },\n\n    lockForm: function()\n    {\n        this.formIsLocked = true;\n        this.ui.loader.show(200);\n        this.ui.save.attr('disabled', true);\n        this.ui.cancel.attr('disabled', true);\n    },\n\n    unlockForm: function()\n    {\n        this.formIsLocked = false;\n        this.ui.loader.hide(200);\n        this.ui.save.removeAttr('disabled');\n        this.ui.cancel.removeAttr('disabled');\n    },\n});\n","Crude.Views.FormModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_formTemplate',\r\n    moduleName: 'form',\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        input: '.input',\r\n        autocomplete: '.autocomplete',\r\n        datetimepicker: '.datetimepicker',\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        this.parentOnRender();\r\n        this.bindAutocomplete();\r\n        this.bindDatepicker();\r\n    },\r\n\r\n    save: function ()\r\n    {\r\n        var data = Crude.getFormValues(this.ui.input);\r\n        this.model.set(data);\r\n\r\n        this.saveModel();\r\n    },\r\n\r\n    bindAutocomplete: function ()\r\n    {\r\n        var setup = this.setup;\r\n        var model = this.model;\r\n        this.ui.autocomplete.each(function ()\r\n        {\r\n            var $el = $(this);\r\n            var $valueEl = $($el.siblings('.autocompleteValue')[0]);\r\n            var name = setup.getName();\r\n            var attr = $el.data('attr');\r\n\r\n            $.post(\r\n                setup.autocompleteRoute('label'),\r\n                {\r\n                    crudeName: name,\r\n                    attr: attr,\r\n                    value: model.get(attr)\r\n                },\r\n                function (response) {\r\n                    $el.val(response);\r\n                }\r\n            );\r\n\r\n            var updateAutocompleteValues = function (label, id)\r\n            {\r\n                $el.val(label);\r\n                $valueEl.val(id);\r\n                $valueEl.trigger('change');\r\n                return;\r\n            };\r\n\r\n            $el.autocomplete({\r\n                source: setup.autocompleteRoute('get/' + name + '/' + attr),\r\n                change: function(event, ui)\r\n                {\r\n                    if ($el.val() == '')\r\n                        $valueEl.val('');\r\n                    $valueEl.trigger('change');\r\n                },\r\n                response: function(event, ui) {\r\n                    Crude.data.autocomplete = ui.content;\r\n                },\r\n                close: function(event, ui) {\r\n                    var selected = _.findWhere(Crude.data.autocomplete, {label: $el.val()});\r\n\r\n                    if (_.isUndefined(selected))\r\n                        return updateAutocompleteValues('', '');\r\n\r\n                    updateAutocompleteValues(selected.label, selected.id);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n\r\n\r\n    bindDatepicker: function ()\r\n    {\r\n        this.ui.datetimepicker.datetimepicker({\r\n            language: 'pl',\r\n            format: 'YYYY-MM-DD hh:mm:00',\r\n            pickerPosition: \"bottom-left\",\r\n            pickSeconds: true,\r\n            icons: {\r\n                time: \"fa fa-clock-o\",\r\n                date: \"fa fa-calendar\",\r\n                up: \"fa fa-arrow-up\",\r\n                down: \"fa fa-arrow-down\"\r\n            }\r\n        });\r\n    }\r\n});\r\n","Crude.Views.FileModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_fileTemplate',\r\n    moduleName: 'file',\r\n\r\n    dropzone: '',\r\n    uploadSuccessfull: true,\r\n    errorMesssages: [],\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        uploadFileDropzone: '#upload_file_dropzone'\r\n    },\r\n\r\n    save: function() { },\r\n\r\n    onRender: function()\r\n    {\r\n        this.parentOnRender();\r\n\r\n        this.ui.save.hide(100);\r\n\r\n        var that = this;\r\n        this.ui.uploadFileDropzone.dropzone({\r\n            headers: {\r\n                'X-CSRF-Token': $('meta[name=\"csrf-token\"]').attr('content')\r\n            },\r\n            url: that.setup.filesRoute('upload'),\r\n            previewTemplate: $('#crude_dropzoneTemplate').html(),\r\n            maxFiles: 10,\r\n            parallelUploads: 10,\r\n            uploadMultiple: true,\r\n            autoProcessQueue: true,\r\n            init: function()\r\n            {\r\n                that.dropzone = this;\r\n\r\n                this.on(\"success\", function(file, response)\r\n                {\r\n                    if (! response.success) {\r\n                        that.uploadSuccessfull = false;\r\n                        that.errorMessages = response.errors.file;\r\n                        return;\r\n                    }\r\n\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                });\r\n\r\n                this.on(\"queuecomplete\", function()\r\n                {\r\n                    if (! that.uploadSuccessfull) {\r\n                        _.each(that.errorMessages, function(error){\r\n                            that.dropzone.removeAllFiles();\r\n                            Crude.showError(error);\r\n                        });\r\n\r\n                        that.errorMessages = [];\r\n                        return;\r\n                    }\r\n\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                });\r\n\r\n                this.on(\"removedfile\", function(file) {\r\n                    if (file.hasOwnProperty('serverPath')){\r\n                        $.ajax({\r\n                            dataType: \"json\",\r\n                            type: 'delete',\r\n                            url: that.setup.filesRoute('delete'),\r\n                            data: {\r\n                                file_path   : file.serverPath,\r\n                                file_log_id : file.fileLogId,\r\n                                crudeName   : that.setup.getName()\r\n                            },\r\n                            success: function(response){\r\n                                that.model = response.model;\r\n\r\n                                Crude.vent.trigger('action_update', that.setup.getName());\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                _.each(that.model.get('files'), function(file, key) {\r\n                    var dzFile = {\r\n                        name: file.file_original_name,\r\n                        thumb: file.path,\r\n                        serverPath: file.path,\r\n                        fileLogId: file.file_log_id\r\n                    };\r\n                    that.dropzone.emit(\"addedfile\", dzFile);\r\n                    that.dropzone.createThumbnailFromUrl(dzFile, dzFile.serverPath);\r\n\r\n                    var existingFileCount = 1; // The number of files already uploaded\r\n                    that.dropzone.options.maxFiles = that.dropzone.options.maxFiles - existingFileCount;\r\n                });\r\n            },\r\n            sending: function(file, xhr, formData) {\r\n                formData.append(\"crudeName\", that.setup.getName());\r\n                formData.append(\"modelId\", that.model.id);\r\n            },\r\n            maxfilesexceeded: function(file) {\r\n                this.removeAllFiles();\r\n                this.addFile(file);\r\n            }\r\n        });\r\n    },\r\n});\r\n","Crude.Views.MapModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_mapTemplate',\r\n    moduleName: 'map',\r\n\r\n    map: null,\r\n    geocoder: null,\r\n    selectedLocation: null,\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        input: '.input',\r\n        'mapContainer': '#mapContainer',\r\n        'info': '#info',\r\n        'position': '#position',\r\n        'search': '#search',\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        this.parentOnRender();\r\n        this.initMap();\r\n    },\r\n\r\n    save: function ()\r\n    {\r\n        this.saveModel();\r\n    },\r\n\r\n    initMap: function () {\r\n        this.map = new google.maps.Map(this.ui.mapContainer[0], {\r\n            center: this.model.getLatLngObject(),\r\n            zoom: 6\r\n        });\r\n        var marker = new google.maps.Marker({\r\n            map: this.map,\r\n            position: this.model.getLatLngObject(),\r\n        });\r\n\r\n        this.showSelectedLocation();\r\n\r\n        this.map.addListener('click', function(event) {\r\n            this.model.set('lat', event.latLng.lat());\r\n            this.model.set('lng', event.latLng.lng());\r\n            this.showSelectedLocation();\r\n\r\n            marker.setPosition(this.model.getLatLngObject());\r\n        }.bind(this));\r\n\r\n        this.bindSearch();\r\n    },\r\n\r\n    showSelectedLocation: function()\r\n    {\r\n        this.ui.position.html(this.model.get('lat') + ' x ' + this.model.get('lng'));\r\n\r\n        var geocoder = new google.maps.Geocoder;\r\n\r\n        geocoder.geocode({'location': this.model.getLatLngObject()}, function(results, status) {\r\n            this.ui.info.html('');\r\n\r\n            if (status !== google.maps.GeocoderStatus.OK)\r\n                return;\r\n\r\n            this.ui.info.html(results[0].formatted_address);\r\n            this.model.set('address', results[0].formatted_address);\r\n        }.bind(this));\r\n    },\r\n\r\n    /**\r\n     * Example from https://developers.google.com/maps/documentation/javascript/examples/places-searchbox\r\n     */\r\n    bindSearch: function()\r\n    {\r\n        var input = this.ui.search[0];\r\n        var map = this.map;\r\n\r\n        var searchBox = new google.maps.places.SearchBox(input);\r\n        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n\r\n        map.addListener('bounds_changed', function() {\r\n            searchBox.setBounds(map.getBounds());\r\n        }.bind(this));\r\n\r\n        var markers = [];\r\n        // Listen for the event fired when the user selects a prediction and retrieve\r\n        // more details for that place.\r\n        searchBox.addListener('places_changed', function() {\r\n            var places = searchBox.getPlaces();\r\n\r\n            if (places.length == 0) {\r\n                return;\r\n            }\r\n\r\n            // Clear out the old markers.\r\n            markers.forEach(function(marker) {\r\n                marker.setMap(null);\r\n            });\r\n            markers = [];\r\n\r\n            // For each place, get the icon, name and location.\r\n            var bounds = new google.maps.LatLngBounds();\r\n            places.forEach(function(place) {\r\n                var icon = {\r\n                    url: place.icon,\r\n                    size: new google.maps.Size(71, 71),\r\n                    origin: new google.maps.Point(0, 0),\r\n                    anchor: new google.maps.Point(17, 34),\r\n                    scaledSize: new google.maps.Size(25, 25)\r\n                };\r\n\r\n                // Create a marker for each place.\r\n                markers.push(new google.maps.Marker({\r\n                    map: map,\r\n                    icon: icon,\r\n                    title: place.name,\r\n                    position: place.geometry.location\r\n                }));\r\n\r\n                if (place.geometry.viewport) {\r\n                    // Only geocodes have viewport.\r\n                    bounds.union(place.geometry.viewport);\r\n                } else {\r\n                    bounds.extend(place.geometry.location);\r\n                }\r\n            });\r\n            map.fitBounds(bounds);\r\n        });\r\n    },\r\n});\r\n","Crude.Views.ListItem = Backbone.Marionette.ItemView.extend(\n{\n    template: '#crude_listItemTemplate',\n    tagName: 'tr',\n\n    className: function ()\n    {\n        var className = 'crude-table-body-row ';\n        className += Crude.data.selectedItem == this.model.get('id') ? 'active' : '';\n        return className;\n    },\n\n    ui: {\n        action: '.action',\n        customAction: '.customAction',\n        delete: '#delete'\n    },\n\n    events: {\n        'click @ui.action': 'action',\n        'click @ui.delete': 'delete',\n        'click @ui.customAction': 'customAction',\n    },\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n        this.listenTo(Crude.vent, 'item_selected', this.itemSelected);\n    },\n\n    onRender: function ()\n    {\n        // initialize all tooltips on a page\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    },\n\n    serializeData: function ()\n    {\n        return {\n            model: this.model,\n            setup: this.setup\n        };\n    },\n\n    action: function (event)\n    {\n        $(':focus').blur();\n\n        Crude.data.selectedItem = this.model.get('id');\n\n        var target = $(event.target);\n        if (! target.hasClass('action'))\n            target = target.parents('.action');\n\n        var action = target.data('action');\n        this.setup.triggerAction(action, this.model);\n    },\n\n    customAction: function (event)\n    {\n        $(':focus').blur();\n\n        var target = $(event.target);\n        if (! target.hasClass('customAction'))\n            target = target.parents('.customAction');\n\n        var alertContainer = $('#' + this.setup.containerId()).find('#alertContainer');\n        var action = target.data('action');\n        var id = this.model.get('id');\n\n        var that = this;\n        $.ajax(\n        {\n            url: that.setup.customActionRoute(action, id),\n            type: 'get',\n            success: function(response)\n            {\n                Crude.showAlert('success', response.data.message, alertContainer);\n                Crude.vent.trigger('action_update', that.setup.getName());\n            },\n            error: function(response)\n            {\n                that.setup.onAjaxFail(response, alertContainer);\n            }\n        });\n    },\n\n    itemSelected: function (setupName)\n    {\n        if (this.setup.getName() != setupName)\n            return;\n\n        if (this.model.get('id') == Crude.data.selectedItem)\n            this.$el.addClass('active');\n        else\n            this.$el.removeClass('active');\n    },\n\n    delete: function ()\n    {\n        $(':focus').blur();\n\n        this.setup.triggerCancel();\n\n        $modal = $('#deleteItemConfirmModal');\n        $modal.modal('show');\n        var alertContainer = $('#' + this.setup.containerId()).find('#alertContainer');\n\n        $modal.find('#confirm').click(function (event)\n        {\n            this.model.destroy({wait: true})\n                .done(function(response) {\n                    if ('message' in  response)\n                        Crude.showAlert('success', response.data.message, alertContainer);\n\n                    $modal.modal('hide');\n                }.bind(this))\n                .fail(function(response) {\n                    var responseTextJSON = JSON.parse(response.responseText);\n\n                    if (response.status == 422) {\n                        errors = _.values(responseTextJSON).join('<br>');\n                        Crude.showAlert('danger', errors, alertContainer);\n                    }\n\n                    if (response.status == 403)\n                        Crude.showAlert('danger', responseTextJSON.error.message, alertContainer);\n\n                    $modal.modal('hide');\n                    this.setup.triggerCancel();\n                }.bind(this));\n        }.bind(this));\n    },\n});\n\nCrude.Views.ListEmpty = Backbone.Marionette.ItemView.extend(\n{\n    template: '#crude_listEmptyTemplate',\n    tagName: 'tr',\n    className: 'crude-table-body-row',\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n    },\n\n    serializeData: function ()\n    {\n        return {\n            setup: this.setup\n        };\n    },\n});\n\nCrude.Views.List = Backbone.Marionette.CompositeView.extend(\n{\n    template: '#crude_listTemplate',\n    childView: Crude.Views.ListItem,\n    emptyView: Crude.Views.ListEmpty,\n    childViewContainer: '#childViewContainer',\n    tagName: 'table',\n    className: 'table table-hover crude-table',\n\n    updateTime: '',\n\n    ui: {\n        updateDelay: '#updateDelay',\n        refresh: '#refresh',\n\n        add: '#add',\n        sort: '.sort',\n\n        changeNumRows: '.changeNumRows',\n\n        changePage: '.changePage',\n\n        changeSearchAttr: '.changeSearchAttr',\n        searchValue: '#searchValue',\n        search: '#search',\n        selectedSearchAttr: '#selectedSearchAttr',\n        clearSearch: '#clearSearch'\n    },\n\n    events: {\n        'click @ui.add': 'add',\n        'click @ui.sort': 'sort',\n        'click @ui.changeNumRows': 'changeNumRows',\n        'click @ui.changePage': 'changePage',\n        'click @ui.changeSearchAttr': 'changeSearchAttr',\n        'click @ui.search': 'search',\n        'keyup @ui.searchValue': 'searchOnEnter',\n        'click @ui.clearSearch': 'clearSearch',\n        'click @ui.refresh': 'updateList'\n    },\n\n    initialize: function (options)\n    {\n        this.setup = options.setup;\n\n        this.updateTime = Date.now();\n\n        this.collection = this.setup.getNewCollection();\n\n        this.updateList();\n        this.listenTo(Crude.vent, 'action_update', this.updateThisList);\n    },\n\n    childViewOptions: function ()\n    {\n        return {\n            setup: this.setup\n        };\n    },\n\n    serializeData: function ()\n    {\n        return {\n            setup: this.setup,\n            sort: this.collection.sort,\n            pagination: this.collection.pagination,\n            search: this.collection.search\n        };\n    },\n\n    onRender: function ()\n    {\n        // initialize all tooltips on a page\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        setInterval(function()\n        {\n            var delay = Date.now() - this.updateTime;\n            delay = parseInt(delay / 1000);\n            var s = delay % 60;\n            var m = parseInt(delay / 60);\n\n            s = String(\"00\" + s).slice(-2);\n\n            this.ui.updateDelay.html( m + ':' + s );\n        }.bind(this), 1000);\n    },\n\n    add: function ()\n    {\n        $(':focus').blur();\n\n        Crude.data.selectedItem = null;\n        this.setup.triggerAction(_.clone(this.setup.get('actions')), this.setup.getNewModel());\n    },\n\n    sort: function (event)\n    {\n        var $target = $(event.target);\n        if (! $target.hasClass('sort'))\n            $target = $target.parents('.sort');\n\n        this.collection.changeSortOptions($target.data('attr'));\n        this.updateList();\n    },\n\n    changeNumRows: function (event)\n    {\n        var $target = $(event.target);\n        this.collection.pagination.numRows = $target.html();\n        this.updateList();\n    },\n\n    changePage: function ()\n    {\n        var $target = $(event.target);\n        this.collection.pagination.page = $target.html();\n        this.updateList();\n    },\n\n    changeSearchAttr: function (event)\n    {\n        var $target = $(event.target);\n\n        this.collection.search.attr = $target.data('attr');\n        this.ui.selectedSearchAttr.html($target.html());\n    },\n\n    searchOnEnter: function (event)\n    {\n        if (event.keyCode == 13)\n            this.search();\n    },\n\n    search: function ()\n    {\n        this.collection.search.value = this.ui.searchValue.val();\n        this.updateList();\n    },\n\n    clearSearch: function ()\n    {\n        this.collection.search.attr = 'id',\n        this.collection.search.value = '';\n        this.updateList();\n    },\n\n    updateList: function ()\n    {\n        this.collection.fetchWithOptions().done(function ()\n        {\n            Crude.vent.trigger('fetched_completed');\n            this.updateTime = Date.now();\n            this.render();\n        }.bind(this));\n    },\n\n    updateThisList: function (setupName)\n    {\n        if (this.setup.getName() == setupName)\n            this.updateList();\n    },\n});\n","Crude.Views.Layout = Backbone.Marionette.LayoutView.extend(\r\n{\r\n    template: '#crude_layoutTemplate',\r\n    tagName:  'div',\r\n    className: '',\r\n\r\n    firstRender: true,\r\n    title: '',\r\n\r\n    regions: {\r\n        'list': '#listRegion',\r\n        'form': '#formRegion',\r\n        'map': '#mapRegion',\r\n        'file': '#fileRegion'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    onRender: function()\r\n    {\r\n        if (this.firstRender) {\r\n            var setup = this.setup;\r\n\r\n            this.list.show(\r\n                new Crude.Views.List({ setup: setup })\r\n            );\r\n\r\n            if (this.setup.isActionAvailable('form'))\r\n                this.form.show(\r\n                    new Crude.Views.FormModule({ setup: setup })\r\n                );\r\n\r\n            if (this.setup.isActionAvailable('file'))\r\n                this.file.show(\r\n                    new Crude.Views.FileModule({ setup: setup })\r\n                );\r\n\r\n            if (this.setup.isActionAvailable('map'))\r\n                this.map.show(\r\n                    new Crude.Views.MapModule({ setup: setup })\r\n                );\r\n\r\n            this.firstRender = false;\r\n        }\r\n\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n});\r\n","$(function()\r\n{\r\n    var crudeSetup = Crude.getData('crudeSetup', []);\r\n    var $crudeContainer = $('#crudeContainer');\r\n\r\n    _.each(crudeSetup, function(setup)\r\n    {\r\n        var setup = new Crude.Models.Setup(setup);\r\n\r\n        $crudeContainer.append(\r\n            '<div id=\"' + setup.containerId() + '\" class=\"container crude-box\"></div>'\r\n        );\r\n\r\n        var view = new Crude.Views.Layout({\r\n            el: '#' + setup.containerId(),\r\n            setup: setup\r\n        });\r\n        view.render();\r\n    });\r\n\r\n    // initialize all tooltips on a page\r\n    $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n    $('#deleteItemConfirmModal').find('.modal-content').html(\r\n        _.template($('#crude_deleteItemConfirmModalTemplate').html())({})\r\n    );\r\n});\r\n"],"sourceRoot":"/source/"}
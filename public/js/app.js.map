{"version":3,"sources":["app.js","helper.js","model.js","module.js","form.js","file.js","map.js","thumbnail.js","rich-filters.js","list.js","layout.js","layout-form.js","layout-map.js","start.js"],"names":[],"mappingshvpxjthlrcrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"app.js","sourcesContent":["$.ajaxSetup({\r\n    headers: {\r\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\r\n    }\r\n});\r\n\r\nCrude = {\r\n    Models: {},\r\n    Views: {},\r\n    Collections: {},\r\n\r\n    /**\r\n     * Event agregator\r\n     * @type Object\r\n     */\r\n    vent: _.extend({}, Backbone.Events),\r\n\r\n    /**\r\n     * Translations\r\n     * @type Object\r\n     */\r\n    trans: {},\r\n\r\n    /**\r\n     * Data\r\n     * @type Object\r\n     */\r\n    data: {},\r\n};\r\n\r\napp = new Backbone.Marionette.Application();\r\n\r\napp.addInitializer(function(options)\r\n{\r\n    Backbone.history.start();\r\n});\r\n\r\n$(function()\r\n{\r\n    app.start();\r\n});\r\n\r\n","\r\n/**\r\n * Get data from Crude.data\r\n * @param  string key\r\n * @param  mixed  defaultValue\r\n * @return mixed\r\n */\r\nCrude.getData = function(key, defaultValue)\r\n{\r\n    if (_.isUndefined(defaultValue))\r\n        defaultValue = null;\r\n\r\n    if (_.isUndefined(this.data[key]))\r\n        return defaultValue;\r\n\r\n    return this.data[key];\r\n};\r\n\r\n/**\r\n * Get trans from Crude.trans\r\n * @param  string key\r\n * @param  string secondKey\r\n * @return mixed\r\n */\r\nCrude.getTrans = function(key, secondKey)\r\n{\r\n    if (_.isUndefined(secondKey)) {\r\n        if (_.isUndefined(this.trans[key]))\r\n            return key;\r\n\r\n        return this.trans[key];\r\n    }\r\n\r\n    if (_.isUndefined(this.trans[key][secondKey]))\r\n        return String(key) + String(secondKey);\r\n\r\n    return this.trans[key][secondKey];\r\n};\r\n\r\n/**\r\n * Show alert\r\n * @param {string} type - info / danger / warning / success\r\n * @param {string} msg\r\n */\r\nCrude.showAlert = function (type, msg, $container)\r\n{\r\n    if (_.isUndefined($container))\r\n        $container = $('#crude_alertContainer');\r\n\r\n    Crude.showAlertInContainer(type, msg, $container);\r\n};\r\n\r\nCrude.showAlertInContainer = function (type, msg, $container)\r\n{\r\n    if (_.isUndefined($container))\r\n        $container = $('#crude_alertContainer');\r\n\r\n    if (String(msg) == '')\r\n        return;\r\n\r\n    if (! jQuery.inArray( type, ['info', 'danger', 'warning', 'success'] ))\r\n        type = 'info';\r\n\r\n    var template = _.template($('#crude_alertTemplate').html());\r\n    $container.append(template({ type: type, msg: msg }));\r\n};\r\n\r\n/**\r\n * Clears all messages that were shown\r\n */\r\nCrude.clearAllAlerts = function($container)\r\n{\r\n    if (_.isUndefined($container))\r\n        $container = $('#crude_alertContainer');\r\n\r\n    $container.empty();\r\n},\r\n\r\n/**\r\n * Short for error alert\r\n */\r\nCrude.showError = function (msg, $container)\r\n{\r\n    if (_.isUndefined($container))\r\n        $container = $('#crude_alertContainer');\r\n\r\n    Crude.showAlertInContainer('danger', msg, $container);\r\n};\r\n\r\n/**\r\n * Show modal\r\n * @param  {string} title\r\n * @param  {string} content\r\n * @param  {array} btnList\r\n * @return {JQuery Modal}\r\n */\r\nCrude.showModal = function (title, content, btnList)\r\n{\r\n    if(title == '')\r\n        title = '&nbsp;';\r\n\r\n    var template = _.template($('#crude_modalTemplate').html());\r\n\r\n    $('#crude_modalContainer').html(template({\r\n        title: title,\r\n        content: content,\r\n        btnList: btnList\r\n    }));\r\n\r\n    var $modal = $('#crude_modalContainer').find('#modalFade');\r\n    var $footer = $modal.find('.modal-footer');\r\n    $modal.modal('show');\r\n\r\n    $modal.on(\"shown.bs.modal\", function(event)\r\n    {\r\n        $modal.find('.btn:first').focus();\r\n    });\r\n\r\n    $modal.on('hidden.bs.modal', function (event)\r\n    {\r\n        $modal.off('hidden.bs.modal');\r\n        $modal.remove();\r\n    });\r\n\r\n    return $modal;\r\n};\r\n\r\n/**\r\n * Get values from input list\r\n * @param  {JQuery object collection} inputList\r\n * @return {array}\r\n */\r\nCrude.getFormValues = function (inputList)\r\n{\r\n    var values = {};\r\n\r\n    inputList.each(function() {\r\n        var $this = $(this);\r\n\r\n        if ($this.attr('type') == 'custom')\r\n            values[$this.data('attr')] = window[$this.data('method')]($this);\r\n        else if ($this.attr('type') == 'checkbox')\r\n            values[$this.data('attr')] = $this.is(':checked');\r\n        else if ($this.attr('type') == 'select')\r\n            values[$this.data('attr')] = $this.find(':selected').val();\r\n        else if ($this.attr('type') == 'json') {\r\n            values[$this.data('attr')] = JSON.parse($this.val());\r\n        }\r\n        else\r\n            values[$this.data('attr')] = $this.val();\r\n    });\r\n\r\n    return values;\r\n};\r\n\r\n/**\r\n * Get attribute label from 'validation.attributes' trans\r\n * @param  {string} attr - attribute name\r\n * @return {string}      - label\r\n */\r\nCrude.getAttrName = function (attr)\r\n{\r\n    return Crude.getTrans('validation.attributes', attr);\r\n};\r\n\r\n/**\r\n * Render input\r\n * @param  {model} setup\r\n * @param  {string} attr    - attribute name\r\n * @param  {object} model   - model data\r\n * @return {HTML}\r\n */\r\nCrude.renderInput = function (setup, attr, model)\r\n{\r\n    var defaultName = '#crude_textInputTemplate';\r\n    var type = setup.get('inputType')[attr];\r\n    var templateName = _.isUndefined(type)\r\n        ? defaultName\r\n        : '#crude_' + type + 'InputTemplate';\r\n\r\n    var templateScript = $(templateName);\r\n    if (templateScript.lenght == 0)\r\n        templateScript = $(defaultName);\r\n\r\n    var template = _.template($(templateName).html());\r\n\r\n    return template({\r\n        setup: setup,\r\n        attr: attr,\r\n        model: model\r\n    });\r\n};\r\n\r\n/**\r\n * Render filter input\r\n * @param  {model} setup\r\n * @param  {object} richFilter - rich filter data\r\n * @param  {mixed} value - filter input value\r\n * @return {HTML}\r\n */\r\nCrude.renderRichFilter = function (setup, richFilter, value)\r\n{\r\n    var defaultName = '#crude_textRichFilterTemplate';\r\n    var type = richFilter.type;\r\n    var templateName = _.isUndefined(type)\r\n        ? defaultName\r\n        : '#crude_' + type + 'RichFilterTemplate';\r\n\r\n    var templateScript = $(templateName);\r\n    if (templateScript.lenght == 0)\r\n        templateScript = $(defaultName);\r\n\r\n    var template = _.template($(templateName).html());\r\n\r\n    return template({\r\n        setup: setup,\r\n        richFilter: richFilter,\r\n        value: value\r\n    });\r\n};\r\n\r\nCrude.renderCell = function (setup, attr, model)\r\n{\r\n    var defaultName = '#crude_textColumFormatTemplate';\r\n    var format = setup.getColumnFormat(attr);\r\n    var templateName = '#crude_' + format.type + 'ColumnFormatTemplate';\r\n\r\n    var templateScript = $(templateName);\r\n    if (templateScript.lenght == 0)\r\n        templateScript = $(defaultName);\r\n\r\n    var template = _.template($(templateName).html());\r\n\r\n    return template({\r\n        setup: setup,\r\n        format: format,\r\n        attr: attr,\r\n        model: model\r\n    });\r\n};\r\n\r\nCrude.whenAvailable = function (name, callback)\r\n{\r\n    var interval = 10; // ms\r\n    var that = this;\r\n\r\n    if (window[name])\r\n        callback();\r\n    else\r\n        window.setTimeout(function() {\r\n            if (window[name])\r\n                callback();\r\n            else\r\n                window.setTimeout(Crude.whenAvailable(name, callback), interval);\r\n        }, interval);\r\n};\r\n","Crude.Models.Base = Backbone.Model.extend(\r\n{\r\n    parse: function(response, options)\r\n    {\r\n        return response.data && response.data.model\r\n            ? response.data.model       // after model update\r\n            : response;                 // after fetch / reset collection\r\n    },\r\n\r\n    getLatLngObject: function()\r\n    {\r\n        return {\r\n            lat: parseFloat(this.get('map_lat')),\r\n            lng: parseFloat(this.get('map_lng'))\r\n        };\r\n    },\r\n\r\n    hasLatLngObject: function()\r\n    {\r\n        return ! _.isNaN(this.getLatLngObject().lat)\r\n            && ! _.isNaN(this.getLatLngObject().lng);\r\n    },\r\n\r\n    isCustomActionAvailable: function(action)\r\n    {\r\n        return this.get(action + 'CustomActionAvailable');\r\n    },\r\n});\r\n\r\nCrude.Collections.Base = Backbone.Collection.extend(\r\n{\r\n    sortAttributes: {\r\n        attr: 'id',\r\n        order: 'asc'\r\n    },\r\n\r\n    pagination: {\r\n        page: 1,\r\n        numRows: 20,\r\n        numPages: 1,\r\n        count: 0,\r\n    },\r\n\r\n    search: {\r\n        attr: 'id',\r\n        value: ''\r\n    },\r\n\r\n    richFilters: {},\r\n\r\n    changeSortOptions: function (attr)\r\n    {\r\n        if (this.sortAttributes.attr == attr) {\r\n            this.sortAttributes.order = this.sortAttributes.order == 'asc' ? 'desc' : 'asc';\r\n            return;\r\n        }\r\n\r\n        this.sortAttributes.attr = attr;\r\n        this.sortAttributes.order = 'asc';\r\n    },\r\n\r\n    fetchWithOptions: function ()\r\n    {\r\n        return this.fetch({data: {\r\n            sortAttr: this.sortAttributes.attr,\r\n            sortOrder: this.sortAttributes.order,\r\n            page: this.pagination.page,\r\n            numRows: this.pagination.numRows,\r\n            searchAttr: this.search.attr,\r\n            searchValue: this.search.value,\r\n            richFilters: this.richFilters\r\n        }});\r\n    },\r\n\r\n    parse: function(response, options)\r\n    {\r\n        if(! response.data)\r\n            return response;\r\n\r\n        if(response.data.sortAttributes)\r\n            this.sortAttributes = response.data.sort;\r\n        if(response.data.pagination)\r\n            this.pagination = response.data.pagination;\r\n        if(response.data.search)\r\n            this.search = response.data.search;\r\n\r\n        if(response.data.richFilters)\r\n            this.richFilters = response.data.richFilters;\r\n\r\n        if(response.data.collection)\r\n            return response.data.collection;\r\n    }\r\n});\r\n\r\nCrude.Models.Setup = Backbone.Model.extend(\r\n{\r\n    idAttribute: 'name',\r\n    defaults:\r\n    {\r\n        name: null,\r\n        title: '',\r\n        description: '',\r\n        column: [],\r\n        extraColumn: {},\r\n        columnFormat: [],\r\n        addForm: [],\r\n        editForm: [],\r\n        inputType: [],\r\n        actions: [],\r\n        deleteOption: true,\r\n        editOption: true,\r\n        addOption: true,\r\n        orderOption: true,\r\n        exportOption: true,\r\n        modelDefaults: [],\r\n        selectOptions: [],\r\n        customeActions: [],\r\n        config: [],\r\n        filters: [],\r\n        richFilters: [],\r\n        showFilters: true,\r\n        trans: [],\r\n        moduleInPopup: false,\r\n        panelView: false,\r\n        checkboxColumn: false,\r\n        orderParameters: {\r\n            idAttr: 'id',\r\n            orderAttr: 'order',\r\n            labelAttr: 'name',\r\n            sortAttr: 'id'\r\n        },\r\n\r\n        actionToTrigger: []\r\n    },\r\n\r\n    getName: function ()\r\n    {\r\n        return this.get('name');\r\n    },\r\n\r\n    config: function (attr)\r\n    {\r\n        var config = this.get('config');\r\n        return config[attr];\r\n    },\r\n\r\n    interfaceTrans: function (key, key2)\r\n    {\r\n        return _.isUndefined(key2)\r\n            ? this.get('interfaceTrans')[key]\r\n            : this.get('interfaceTrans')[key][key2];\r\n    },\r\n\r\n    baseRoute: function (name, uri)\r\n    {\r\n        return '/' + this.config('routePrefix') + '/' + name + '/' + uri;\r\n    },\r\n\r\n    apiRoute: function ()\r\n    {\r\n        return this.baseRoute('api', this.getName());\r\n    },\r\n\r\n    autocompleteRoute: function(url)\r\n    {\r\n        return this.baseRoute('autocomplete', url);\r\n    },\r\n\r\n    filesRoute: function (url)\r\n    {\r\n        return this.baseRoute('file', url);\r\n    },\r\n\r\n    thumbnailRoute: function (url)\r\n    {\r\n        return this.baseRoute('thumbnail', url);\r\n    },\r\n\r\n    customActionRoute: function (action, id)\r\n    {\r\n        return this.baseRoute('custom-action', this.getName() + '/' + action + '/' + id);\r\n    },\r\n\r\n    orderedListRoute: function ()\r\n    {\r\n        return this.baseRoute('ordered-list', this.getName());\r\n    },\r\n\r\n    containerId: function ()\r\n    {\r\n        return 'crudeSetup_' + this.getName();\r\n    },\r\n\r\n    formContainerId: function ()\r\n    {\r\n        return 'crudeForm_' + this.getName();\r\n    },\r\n\r\n    mapContainerId: function ()\r\n    {\r\n        return 'crudeMap_' + this.getName();\r\n    },\r\n\r\n    getVisibleColumns: function ()\r\n    {\r\n        var columns = this.get('column');\r\n        var extraColumns = this.get('extraColumn');\r\n\r\n        if (_.isEmpty(extraColumns))\r\n            return columns;\r\n\r\n        var visibleColumns = [];\r\n        for (var i in columns) {\r\n            var column = columns[i];\r\n\r\n            if (! _.isArray(column)) {\r\n                if (! (column in extraColumns) || extraColumns[column].visible)\r\n                    visibleColumns.push(column);\r\n            } else {\r\n                var newItem = [];\r\n                for (var j in column) {\r\n                    var item = column[j];\r\n\r\n                    if (! (item in extraColumns) || extraColumns[item].visible)\r\n                        newItem.push(item);\r\n                }\r\n\r\n                if (newItem.length)\r\n                    visibleColumns.push(newItem);\r\n            }\r\n        }\r\n\r\n        return visibleColumns;\r\n    },\r\n\r\n    getColumnFormat: function (attr)\r\n    {\r\n        var columnFormat = this.get('columnFormat');\r\n\r\n        return attr in columnFormat\r\n            ? columnFormat[attr]\r\n            : {type: 'text'};\r\n    },\r\n\r\n    getNewCollection: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n        var defaults = this.get('modelDefaults');\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute,\r\n            defaults: defaults\r\n        });\r\n        var collection = Crude.Collections.Base.extend({\r\n            model: model,\r\n            url: apiRoute,\r\n            sortAttributes: {\r\n                attr: this.get('defaultSortAttr'),\r\n                order: this.get('defaultSortOrder')\r\n            },\r\n        });\r\n\r\n        var col = new collection;\r\n\r\n        // if (this.config('sortAttr') != 'id')\r\n        //     col.changeSortOptions(this.config('sortAttr'));\r\n\r\n        return col;\r\n    },\r\n\r\n    getNewModel: function ()\r\n    {\r\n        var apiRoute = this.apiRoute();\r\n        var defaults = this.get('modelDefaults');\r\n\r\n        var model = Crude.Models.Base.extend({\r\n            urlRoot: apiRoute,\r\n            defaults: defaults\r\n        });\r\n\r\n        return new model;\r\n    },\r\n\r\n    isActionAvailable: function (action)\r\n    {\r\n        return _.indexOf(this.get('actions'), action) != -1;\r\n    },\r\n\r\n    getNextAction: function (action)\r\n    {\r\n        var index = _.indexOf(this.get('actions'), action) + 1;\r\n        var next = this.get('actions')[index];\r\n        return _.isUndefined(next) ? '' : next;\r\n    },\r\n\r\n    triggerAction: function (actionToTrigger, model)\r\n    {\r\n        if (! _.isArray(actionToTrigger))\r\n            actionToTrigger = [actionToTrigger];\r\n\r\n        $('html, body').animate({\r\n            scrollTop: $('#' + this.containerId()).offset().top - 200\r\n        }, 500);\r\n\r\n        this.set('actionToTrigger', actionToTrigger);\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        this.triggerNextAction(model);\r\n    },\r\n\r\n    /**\r\n     * Trigger next action\r\n     */\r\n    triggerNextAction: function (model)\r\n    {\r\n        Crude.vent.trigger('item_selected', this.getName());\r\n\r\n        var actionToTrigger = this.get('actionToTrigger');\r\n        if (actionToTrigger.length == 0) {\r\n            this.triggerCancel();\r\n            return;\r\n        }\r\n\r\n        var action = actionToTrigger[0];\r\n        actionToTrigger.shift();\r\n        Crude.vent.trigger('action_change', this.getName());\r\n        Crude.vent.trigger('action_' + action, this.getName(), model);\r\n    },\r\n\r\n    triggerCancel: function ()\r\n    {\r\n        Crude.data.selectedItem = null;\r\n        Crude.vent.trigger('action_end', this.getName());\r\n        Crude.vent.trigger('action_update', this.getName());\r\n    },\r\n\r\n    getAttrName: function (attr)\r\n    {\r\n        var trans = this.get('trans');\r\n\r\n        if (attr in trans)\r\n            return trans[attr];\r\n\r\n        return Crude.getAttrName(attr);\r\n    },\r\n\r\n    onAjaxFail: function(response, alertContainer)\r\n    {\r\n        if (! this.IsJsonString(response.responseText)) {\r\n            Crude.showAlert('danger', response.responseText, alertContainer);\r\n            return;\r\n        }\r\n\r\n        var responseTextJSON = JSON.parse(response.responseText);\r\n\r\n        if (response.status == 422) {\r\n            var msg = _.values(responseTextJSON).join('<br>');\r\n            Crude.showError(msg, alertContainer);\r\n        }\r\n\r\n        if (response.status == 403) {\r\n            var msg = responseTextJSON.error.message;\r\n            Crude.showError(msg, alertContainer);\r\n            this.setup.triggerCancel();\r\n        }\r\n    },\r\n\r\n    IsJsonString: function (str) {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n});\r\n","Crude.Views.Module = Backbone.Marionette.ItemView.extend(\r\n{\r\n    tagName: 'div',\r\n    moduleName: '',\r\n    formIsLocked: false,\r\n    slideUpAllow: true,\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        clear: '#clear',\r\n        input: '.input',\r\n        loader: '#loader'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.save': 'save',\r\n        'click @ui.cancel': 'cancel',\r\n        'click @ui.clear': 'clear'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.moduleInitialize(options);\r\n    },\r\n\r\n    moduleInitialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n\r\n        this.model = 'model' in options ? options.model : this.setup.getNewModel();\r\n\r\n        this.slideUpAllow = 'slideUpAllow' in options ? options.slideUpAllow : this.slideUpAllow;\r\n\r\n        this.listenTo(Crude.vent, 'action_' + this.moduleName, this.onAction);\r\n        this.listenTo(Crude.vent, 'action_end', this.onActionEnd);\r\n        this.listenTo(Crude.vent, 'action_change', this.onActionChange);\r\n        this.listenTo(Crude.vent, 'save_this_model', this.saveThisModel);\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            model: this.model.toJSON(),\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        this.parentOnRender();\r\n    },\r\n\r\n    parentOnRender: function ()\r\n    {\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n\r\n    onActionEnd: function (setupName)\r\n    {\r\n        if (this.setup.getName() == setupName)\r\n            this.slideUp();\r\n    },\r\n\r\n    onActionChange: function (setupName)\r\n    {\r\n        if (this.setup.getName() == setupName)\r\n            this.changeUp();\r\n    },\r\n\r\n    onAction: function (setupName, model)\r\n    {\r\n        if (this.setup.getName() == setupName)\r\n            this.setNewModel(model);\r\n    },\r\n\r\n    setNewModel: function (model)\r\n    {\r\n        if (! this.setup.get('moduleInPopup')) {\r\n            this.$el.parent().slideDown(100, function () {\r\n                Crude.vent.trigger('slide_down_finished', this.setup.getName());\r\n            }.bind(this));\r\n        } else {\r\n            this.$el.parent().show();\r\n            this.$el.parents('#moduleModal').modal('show');\r\n        }\r\n\r\n        this.model = model;\r\n        this.render();\r\n    },\r\n\r\n    alertContainer: function ()\r\n    {\r\n        return $('#' + this.setup.containerId()).find('#alertContainer');\r\n    },\r\n\r\n    clearAllAlerts: function ()\r\n    {\r\n        Crude.clearAllAlerts(this.alertContainer());\r\n    },\r\n\r\n    showError: function (msg)\r\n    {\r\n        Crude.showError(msg, this.alertContainer());\r\n    },\r\n\r\n    showMessage: function (msg)\r\n    {\r\n        Crude.showAlert('success', msg, this.alertContainer());\r\n    },\r\n\r\n    slideUp: function ()\r\n    {\r\n        if (! this.slideUpAllow)\r\n            return;\r\n\r\n        this.clearAllAlerts();\r\n\r\n        if (this.setup.get('moduleInPopup')) {\r\n            this.$el.parent().hide();\r\n            this.$el.parents('#moduleModal').modal('hide');\r\n            return;\r\n        }\r\n\r\n        this.$el.parent().slideUp(100, function () {\r\n            Crude.vent.trigger('slide_up_finished', this.setup.getName());\r\n        }.bind(this));\r\n    },\r\n\r\n    changeUp: function ()\r\n    {\r\n        this.$el.parent().hide();\r\n    },\r\n\r\n    cancel: function ()\r\n    {\r\n        this.setup.triggerCancel();\r\n    },\r\n\r\n    saveModel: function (response)\r\n    {\r\n        if (this.formIsLocked)\r\n            return;\r\n\r\n        this.clearAllAlerts();\r\n        $(':focus').blur();\r\n        this.lockForm();\r\n\r\n        this.model.save()\r\n            .done(function (response) { this.onSaveSuccess(response); }.bind(this))\r\n            .fail(function (response) { this.onSaveFail(response); }.bind(this));\r\n    },\r\n\r\n    onSaveSuccess: function (response)\r\n    {\r\n        this.unlockForm();\r\n\r\n        if (('data' in response) && ('message' in  response.data))\r\n            this.showMessage(response.data.message);\r\n\r\n        if (('data' in response) && ('model' in  response.data))\r\n            this.model.set(response.data.model);\r\n\r\n        this.setup.triggerNextAction(this.model);\r\n    },\r\n\r\n    onSaveFail: function (response)\r\n    {\r\n        this.unlockForm();\r\n\r\n        this.setup.onAjaxFail(response, this.alertContainer());\r\n    },\r\n\r\n    lockForm: function ()\r\n    {\r\n        this.formIsLocked = true;\r\n        this.ui.loader.show(200);\r\n        this.ui.save.attr('disabled', true);\r\n        this.ui.cancel.attr('disabled', true);\r\n    },\r\n\r\n    unlockForm: function ()\r\n    {\r\n        this.formIsLocked = false;\r\n        this.ui.loader.hide(200);\r\n        this.ui.save.removeAttr('disabled');\r\n        this.ui.cancel.removeAttr('disabled');\r\n    },\r\n\r\n    saveThisModel: function (crudeName)\r\n    {\r\n        if (this.setup.getName() == crudeName)\r\n            this.save();\r\n    }\r\n});\r\n","Crude.Views.FormModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_formModuleTemplate',\r\n    moduleName: 'form',\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        input: '.input',\r\n        loader: '#loader',\r\n        autocomplete: '.autocomplete',\r\n        datetimepicker: '.datetimepicker',\r\n        showMarkdownPrieview: '.showMarkdownPrieview',\r\n        markdownInput: '.markdownInput'\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        this.parentOnRender();\r\n        this.bindAutocomplete();\r\n        this.bindDatepicker();\r\n        this.bindMarkdownPreview();\r\n    },\r\n\r\n    save: function ()\r\n    {\r\n        var data = Crude.getFormValues(this.ui.input);\r\n        this.model.set(data);\r\n\r\n        this.saveModel();\r\n    },\r\n\r\n    bindAutocomplete: function ()\r\n    {\r\n        var setup = this.setup;\r\n        var model = this.model;\r\n        this.ui.autocomplete.each(function ()\r\n        {\r\n            var $el = $(this);\r\n            var $valueEl = $($el.siblings('.autocompleteValue')[0]);\r\n            var name = setup.getName();\r\n            var attr = $el.data('attr');\r\n\r\n            $.post(\r\n                setup.autocompleteRoute('label'),\r\n                {\r\n                    crudeName: name,\r\n                    attr: attr,\r\n                    value: model.get(attr)\r\n                },\r\n                function (response) {\r\n                    $el.val(response);\r\n                }\r\n            );\r\n\r\n            var updateAutocompleteValues = function (label, id)\r\n            {\r\n                $el.val(label);\r\n                $valueEl.val(id);\r\n                $valueEl.trigger('change');\r\n                return;\r\n            };\r\n\r\n            $el.autocomplete({\r\n                source: setup.autocompleteRoute('get/' + name + '/' + attr),\r\n                change: function(event, ui)\r\n                {\r\n                    if ($el.val() == '')\r\n                        $valueEl.val('');\r\n                    $valueEl.trigger('change');\r\n                },\r\n                response: function(event, ui) {\r\n                    Crude.data.autocomplete = ui.content;\r\n                },\r\n                close: function(event, ui) {\r\n                    var selected = _.findWhere(Crude.data.autocomplete, {label: $el.val()});\r\n\r\n                    if (_.isUndefined(selected))\r\n                        return updateAutocompleteValues($el.val(), '');\r\n\r\n                    updateAutocompleteValues(selected.label, selected.id);\r\n                }\r\n            });\r\n        });\r\n\r\n        this.ui.autocomplete.blur(function (event)\r\n        {\r\n            var $el = $(this);\r\n            var val = $($el.siblings('.autocompleteValue')[0]).val();\r\n            if (_.isEmpty(val))\r\n                $el.val('');\r\n        });\r\n    },\r\n\r\n    bindDatepicker: function ()\r\n    {\r\n        // check default in JanDolata\\CrudeCRUD\\Engine\\CrudeSetupTrait\\DateTimePickerOptions\r\n        this.ui.datetimepicker.datetimepicker(\r\n            this.setup.get('dateTimePickerOptions')\r\n        );\r\n    },\r\n\r\n    bindMarkdownPreview: function ()\r\n    {\r\n        var md = window.markdownit();\r\n\r\n        var updateMarkdownPreview = function (el) {\r\n            var val = $(el).val();\r\n            $(el).parents('.row').find('.markdownPreview').html(md.render(val));\r\n        };\r\n\r\n        this.ui.markdownInput.bind('keyup', function () {\r\n            updateMarkdownPreview(this);\r\n        });\r\n\r\n        this.ui.markdownInput.bind('click', function () {\r\n            updateMarkdownPreview(this);\r\n        });\r\n    }\r\n});\r\n","Crude.Views.FileModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_fileModuleTemplate',\r\n    moduleName: 'file',\r\n\r\n    dropzone: '',\r\n    uploadSuccessfull: true,\r\n    errorMesssages: [],\r\n    maxFiles: 10,\r\n    parallelUploads: 10,\r\n    cleaningUp: false,\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        loader: '#loader',\r\n        uploadFileDropzone: '#upload_file_dropzone'\r\n    },\r\n\r\n    save: function() { },\r\n\r\n    initialize: function(options)\r\n    {\r\n        this.moduleInitialize(options);\r\n\r\n        this.maxFiles = options.hasOwnProperty(\"maxFiles\") ? options.maxFiles : this.maxFiles;\r\n        this.parallelUploads = options.hasOwnProperty(\"parallelUploads\") ? options.parallelUploads : this.parallelUploads;\r\n    },\r\n\r\n    onRender: function()\r\n    {\r\n        this.parentOnRender();\r\n\r\n        this.ui.save.hide(100);\r\n\r\n        var that = this;\r\n        this.ui.uploadFileDropzone.dropzone({\r\n            headers: {\r\n                'X-CSRF-Token': $('meta[name=\"csrf-token\"]').attr('content')\r\n            },\r\n            url: that.setup.filesRoute('upload'),\r\n            previewTemplate: $('#crude_dropzoneTemplate').html(),\r\n            maxFiles: that.maxFiles,\r\n            parallelUploads: that.parallelUploads,\r\n            uploadMultiple: true,\r\n            autoProcessQueue: true,\r\n            init: function()\r\n            {\r\n                that.dropzone = this;\r\n\r\n                this.on(\"success\", function(file, response)\r\n                {\r\n                    if (response.success && \"model\" in response && \"files\" in response.model) {\r\n                        var fileIndex = _.findKey(response.model.files, {'file_original_name': file.name});\r\n                        file.fileLogId = response.model.files[fileIndex].file_log_id;\r\n                    }\r\n                });\r\n\r\n                this.on(\"successmultiple\", function(file, response) {\r\n                    if (response.hasOwnProperty(\"errors\")) {\r\n                        that.uploadSuccessfull = false;\r\n                        Crude.showError(response.errors, that.alertContainer());\r\n                    }\r\n\r\n                    updateModelFiles(response.model.files);\r\n                    updateFiles();\r\n\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                });\r\n\r\n                this.on(\"removedfile\", function(file) {\r\n                    if (file.hasOwnProperty('fileLogId') && !that.cleaningUp){\r\n                        $.ajax({\r\n                            dataType: \"json\",\r\n                            type: 'delete',\r\n                            url: that.setup.filesRoute('delete'),\r\n                            data: {\r\n                                file_path    : file.serverPath,\r\n                                file_log_id  : file.fileLogId,\r\n                                crudeName    : that.setup.getName(),\r\n                                crudeModelId : that.model.id\r\n                            },\r\n                            success: function(response){\r\n                                updateModelFiles(response.model.files);\r\n\r\n                                Crude.vent.trigger('action_update', that.setup.getName());\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var updateModelFiles = function (files) {\r\n                    that.model.set(\r\n                        that.setup.get('fileAttrName'),\r\n                        files\r\n                    );\r\n                };\r\n\r\n                var updateFiles = function() {\r\n                    that.cleaningUp = true;\r\n                    that.dropzone.removeAllFiles();\r\n                    that.cleaningUp = false;\r\n\r\n                    var files = that.model.get(that.setup.get('fileAttrName'));\r\n                    _.each(files, function(file, key) {\r\n                        var dzFile = {\r\n                            name: file.file_original_name,\r\n                            thumb: file.path,\r\n                            serverPath: file.path,\r\n                            fileLogId: file.file_log_id\r\n                        };\r\n                        that.dropzone.emit(\"addedfile\", dzFile);\r\n                        that.dropzone.createThumbnailFromUrl(dzFile, dzFile.serverPath);\r\n                        that.dropzone.files.push(dzFile);\r\n\r\n                        that.dropzone.options.maxFiles = that.maxFiles - files.length;\r\n                    });\r\n                };\r\n                updateFiles();\r\n            },\r\n            sending: function(file, xhr, formData) {\r\n                formData.append(\"crudeName\", that.setup.getName());\r\n                formData.append(\"modelId\", that.model.id);\r\n            },\r\n\r\n            dictMaxFilesExceeded: that.setup.interfaceTrans(\"dictMaxFilesExceeded\")\r\n        });\r\n    },\r\n});\r\n","Crude.Views.Map = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#crude_mapTemplate',\r\n    tagName: 'div',\r\n\r\n    updateTime: '',\r\n    firstCount: null,\r\n    markers: [],\r\n\r\n    map: null,\r\n    geocoder: null,\r\n    infowindow: null,\r\n\r\n    ui: {\r\n        mapContainer: '#mapContainer'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n\r\n        this.collection = this.setup.getNewCollection();\r\n        this.updateList();\r\n\r\n        this.listenTo(Crude.vent, 'action_update', this.updateThisList);\r\n        this.listenTo(Crude.vent, 'rich_filters_change', this.richFiltersChange);\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n        Crude.whenAvailable(\"google\", function() {\r\n            this.initMap();\r\n        }.bind(this));\r\n    },\r\n\r\n    initMap: function ()\r\n    {\r\n        this.map = new google.maps.Map(this.ui.mapContainer[0], {\r\n            center: this.setup.config('mapCenter'),\r\n            zoom: 6\r\n        });\r\n\r\n        this.geocoder = new google.maps.Geocoder;\r\n        this.infowindow = new google.maps.InfoWindow;\r\n\r\n        this.showMarkers();\r\n        console.log(this.map);\r\n    },\r\n\r\n    addMarker: function (model) {\r\n        var latLngObject = model.getLatLngObject();\r\n        var title = [\r\n            model.get('map_address'),\r\n            model.get('map_postal_code') + ' ' + model.get('map_locality'),\r\n            model.get('map_province'),\r\n            model.get('map_lat') + ' : ' + model.get('map_lng')\r\n        ].join('; ');\r\n\r\n        var newLength = this.markers.push(\r\n            new google.maps.Marker({\r\n                map: this.map,\r\n                position: latLngObject,\r\n                title: title\r\n            })\r\n        );\r\n\r\n        var marker = this.markers[newLength - 1];\r\n        var data = {\r\n            model: this.model,\r\n            setup: this.setup\r\n        };\r\n\r\n        marker.addListener('click', function() {\r\n            this.showInfo(marker, data);\r\n        }.bind(this));\r\n    },\r\n\r\n    removeAllMarkers: function () {\r\n        _.each(this.markers, function(item) {\r\n            item.setMap(null);\r\n        });\r\n\r\n        this.markers = [];\r\n    },\r\n\r\n    showInfo: function (marker, data) {\r\n        var infowindowTemplate = _.template($('#crude_mapInfowindowTemplate').html());\r\n\r\n        this.geocoder.geocode({'location': marker.getPosition()}, function(results, status) {\r\n            if (status !== google.maps.GeocoderStatus.OK)\r\n                return;\r\n\r\n            data.address = results[0].formatted_address;\r\n            this.infowindow.setContent(infowindowTemplate(data));\r\n            this.infowindow.open(this.map, marker);\r\n        }.bind(this));\r\n    },\r\n\r\n    showMarkers: function() {\r\n        this.removeAllMarkers();\r\n\r\n        this.collection.each(function(model) {\r\n            if (model.hasLatLngObject())\r\n                this.addMarker(model);\r\n        }.bind(this));\r\n    },\r\n\r\n    updateList: function ()\r\n    {\r\n        if (this.firstCount != null)\r\n            this.collection.pagination.numRows = this.firstCount;\r\n\r\n        this.collection.fetchWithOptions().done(function (response)\r\n        {\r\n            Crude.vent.trigger('fetched_completed');\r\n            this.updateTime = Date.now();\r\n\r\n            if (this.firstCount == null)\r\n                this.firstCount = this.collection.pagination.count;\r\n\r\n            this.showMarkers();\r\n        }.bind(this));\r\n    },\r\n\r\n    updateThisList: function (setupName)\r\n    {\r\n        if (this.setup.getName() == setupName || this.setup.config('refreshAll'))\r\n            this.updateList();\r\n    },\r\n\r\n    richFiltersChange: function (setupName, richFilters)\r\n    {\r\n        if (this.setup.getName() == setupName) {\r\n            this.collection.richFilters = richFilters;\r\n            this.updateList();\r\n        }\r\n    }\r\n\r\n});\r\n","Crude.Views.ThumbnailModule = Crude.Views.Module.extend(\r\n{\r\n    template: '#crude_thumbnailModuleTemplate',\r\n    moduleName: 'thumbnail',\r\n\r\n    dropzone: '',\r\n    uploadSuccessfull: true,\r\n    errorMesssages: [],\r\n\r\n    ui: {\r\n        save: '#save',\r\n        cancel: '#cancel',\r\n        loader: '#loader',\r\n    },\r\n\r\n    save: function() { },\r\n\r\n    onRender: function()\r\n    {\r\n        var that = this;\r\n        _.each(this.setup.get('thumbnailColumns'), function(column) {\r\n            this.$('#upload_file_dropzone_' + column.name).dropzone(\r\n                that.dropzoneSetup(column.name)\r\n            );\r\n        });\r\n\r\n        this.parentOnRender();\r\n\r\n        this.ui.save.hide(100);\r\n    },\r\n\r\n    dropzoneSetup: function(column)\r\n    {\r\n        var that = this;\r\n        return {\r\n            headers: {\r\n                'X-CSRF-Token': $('meta[name=\"csrf-token\"]').attr('content')\r\n            },\r\n            url: that.setup.thumbnailRoute('upload'),\r\n            previewTemplate: $('#crude_dropzoneThumbnailTemplate').html(),\r\n            maxFiles: 1,\r\n            uploadMultiple: false,\r\n            autoProcessQueue: true,\r\n            init: function()\r\n            {\r\n                that.dropzone = this;\r\n\r\n                this.on(\"success\", function(file, response)\r\n                {\r\n                    if (response.success) {\r\n                        file.serverPath = response.model[column].original_path;\r\n                    }\r\n\r\n                    if (! response.success) {\r\n                        that.uploadSuccessfull = false;\r\n                        that.errorMessages = response.errors.file;\r\n                        return;\r\n                    }\r\n\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                });\r\n\r\n                this.on(\"queuecomplete\", function()\r\n                {\r\n                    if (! that.uploadSuccessfull) {\r\n                        _.each(that.errorMessages, function(error){\r\n                            that.dropzone.removeAllFiles();\r\n                            Crude.showError(error, that.alertContainer());\r\n                        });\r\n\r\n                        that.errorMessages = [];\r\n                        return;\r\n                    }\r\n\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                });\r\n\r\n                this.on(\"removedfile\", function(file) {\r\n                    if (file.hasOwnProperty('serverPath')){\r\n                        $.ajax({\r\n                            dataType: \"json\",\r\n                            type: 'delete',\r\n                            url: that.setup.thumbnailRoute('delete'),\r\n                            data: {\r\n                                model_id    : that.model.id,\r\n                                model_column : column,\r\n                                file_path   : file.serverPath,\r\n                                crudeName   : that.setup.getName()\r\n                            },\r\n                            success: function(response){\r\n                                that.model = response.model;\r\n\r\n                                Crude.vent.trigger('action_update', that.setup.getName());\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                var file = that.model.get(column);\r\n                if (file) {\r\n                    var dzFile = {\r\n                        name: file.file_original_name,\r\n                        thumb: file.original_path,\r\n                        serverPath: file.original_path,\r\n                        accepted: true\r\n                    };\r\n                    that.dropzone.emit(\"addedfile\", dzFile);\r\n                    that.dropzone.createThumbnailFromUrl(dzFile, dzFile.serverPath);\r\n\r\n                    that.dropzone.files.push(dzFile);\r\n\r\n                    // var existingFileCount = 1; // The number of files already uploaded\r\n                    // that.dropzone.options.maxFiles = that.dropzone.options.maxFiles - existingFileCount;\r\n                }\r\n\r\n            },\r\n            sending: function(file, xhr, formData) {\r\n                formData.append(\"crudeName\", that.setup.getName());\r\n                formData.append(\"modelId\", that.model.id);\r\n                formData.append(\"columnName\", column);\r\n            },\r\n            maxfilesexceeded: function(file) {\r\n                this.removeAllFiles();\r\n                this.addFile(file);\r\n            }\r\n        }\r\n    }\r\n});\r\n","Crude.Models.RichFilter = Backbone.Model.extend(\r\n{\r\n    idAttribute: 'name',\r\n\r\n    defaults: {\r\n        name: '',\r\n        label: '',\r\n        type: 'text',\r\n        options: [],\r\n\r\n        value: '',\r\n        hidden: true\r\n    },\r\n\r\n    showWithValue: function (value) {\r\n        this.set('hidden', false);\r\n        this.set('value', value);\r\n    },\r\n\r\n    clearAndHide: function () {\r\n        this.set('hidden', true);\r\n        this.set('value', '');\r\n    },\r\n\r\n    isActive: function () {\r\n        return ! this.get('hidden') && this.get('value');\r\n    }\r\n});\r\n\r\nCrude.Collections.RichFilters = Backbone.Collection.extend(\r\n{\r\n    model: Crude.Models.RichFilter,\r\n\r\n    getFiltersValues: function () {\r\n        var filters = {};\r\n\r\n        this.each(function (model) {\r\n            if (model.isActive())\r\n                filters[model.get('name')] = model.get('value');\r\n        });\r\n\r\n        return filters;\r\n    }\r\n});\r\n\r\nCrude.Views.RichFilterListItem = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#crude_richFilterListItemTemplate',\r\n    tagName: 'span',\r\n\r\n    ui: {\r\n        'clearRichFilter': '.clearRichFilter',\r\n        'richFilterValue': '.richFilterValue'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.clearRichFilter': 'clearRichFilter',\r\n        'change @ui.richFilterValue': 'changeRichFilterValue'\r\n    },\r\n\r\n    className: function () {\r\n        return this.model.get('hidden') ? 'hidden' : '';\r\n    },\r\n\r\n    initialize: function (options) {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function () {\r\n        return {\r\n            setup: this.setup,\r\n            model: this.model\r\n        };\r\n    },\r\n\r\n    onRender: function () {\r\n        if (this.model.get('type') == 'datetime')\r\n            this.bindDatepickerInRichFilters();\r\n    },\r\n\r\n    changeRichFilterValue: function () {\r\n        var value = $(this.ui.richFilterValue).val();\r\n        this.model.set('value', value);\r\n        Crude.vent.trigger('rich_filter_value_change', this.setup.getName());\r\n    },\r\n\r\n    clearRichFilter: function () {\r\n        this.model.clearAndHide();\r\n        Crude.vent.trigger('rich_filter_value_change', this.setup.getName());\r\n    },\r\n\r\n    bindDatepickerInRichFilters: function ()\r\n    {\r\n        // check default in JanDolata\\CrudeCRUD\\Engine\\CrudeSetupTrait\\DateTimePickerOptions\r\n        var defaultOptions = this.setup.get('dateTimePickerOptions');\r\n\r\n        var options = _.isEmpty(this.model.get('options'))\r\n            ? defaultOptions\r\n            : this.model.get('options');\r\n\r\n        var $input = $(this.ui.richFilterValue).parent();\r\n        $input.datetimepicker(options);\r\n\r\n        $input.on('dp.hide', function(e) {\r\n            this.changeRichFilterValue();\r\n        }.bind(this));\r\n    },\r\n});\r\n\r\nCrude.Views.RichFilterList = Backbone.Marionette.CompositeView.extend(\r\n{\r\n    template: '#crude_richFilterListTemplate',\r\n    childView: Crude.Views.RichFilterListItem,\r\n    childViewContainer: '#childViewContainer',\r\n    tagName: 'div',\r\n\r\n    ui: {\r\n        'showRichFilter': '#showRichFilter'\r\n    },\r\n\r\n    events: {\r\n        'change @ui.showRichFilter': 'showRichFilter'\r\n    },\r\n\r\n    initialize: function (options) {\r\n        this.setup = options.setup;\r\n\r\n        this.collection = new Crude.Collections.RichFilters(\r\n            _.values(this.setup.get('richFilters'))\r\n        );\r\n\r\n        this.listenTo(Crude.vent, 'rich_filter_value_change', this.richFilterValueChange);\r\n\r\n        this.getFiltersFromUrlHash();\r\n        this.triggerUpdateList();\r\n    },\r\n\r\n    childViewOptions: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    serializeData: function () {\r\n        return {\r\n            setup: this.setup,\r\n            collection: this.collection\r\n        };\r\n    },\r\n\r\n    showRichFilter: function () {\r\n        var name = $(this.ui.showRichFilter).val();\r\n        var model = this.collection.get(name);\r\n\r\n        model.showWithValue('');\r\n        this.render();\r\n    },\r\n\r\n    richFilterValueChange: function (name) {\r\n        if (this.setup.getName() == name)\r\n            this.triggerUpdateList();\r\n    },\r\n\r\n    triggerUpdateList: function () {\r\n        var filters = this.collection.getFiltersValues();\r\n\r\n        Crude.vent.trigger('rich_filters_change', this.setup.getName(), filters);\r\n        this.updateUrlHash(filters);\r\n        this.render();\r\n    },\r\n\r\n    updateUrlHash: function (filters) {\r\n        window.location.hash = '';\r\n\r\n        for (var name in filters)\r\n            window.location.hash += '#' + name + '=' + filters[name];\r\n    },\r\n\r\n    getFiltersFromUrlHash: function () {\r\n        var hash = window.location.hash.split('#');\r\n        this.collection.richFilters = {};\r\n\r\n        for (var i in hash) {\r\n            if (hash[i] != '') {\r\n                var values = hash[i].split('=');\r\n                var model = this.collection.get(values[0]);\r\n\r\n                if (model)\r\n                    model.showWithValue(values[1]);\r\n            }\r\n        }\r\n    },\r\n});\r\n","Crude.Views.ListItem = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#crude_listItemTemplate',\r\n    tagName: 'tr',\r\n\r\n    className: function ()\r\n    {\r\n        var className = 'crude-table-body-row ';\r\n        className += Crude.data.selectedItem == this.model.get('id') ? 'active' : '';\r\n        return className;\r\n    },\r\n\r\n    ui: {\r\n        action: '.action',\r\n        customAction: '.customAction',\r\n        delete: '#delete'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.action': 'action',\r\n        'click @ui.delete': 'delete',\r\n        'click @ui.customAction': 'customAction',\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n        this.listenTo(Crude.vent, 'item_selected', this.itemSelected);\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            model: this.model,\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    action: function (event)\r\n    {\r\n        $(':focus').blur();\r\n\r\n        Crude.data.selectedItem = this.model.get('id');\r\n\r\n        var target = $(event.target);\r\n        if (! target.hasClass('action'))\r\n            target = target.parents('.action');\r\n\r\n        var action = target.data('action');\r\n        this.setup.triggerAction(action, this.model);\r\n    },\r\n\r\n    customAction: function (event)\r\n    {\r\n        $(':focus').blur();\r\n\r\n        var target = $(event.target);\r\n        if (! target.hasClass('customAction'))\r\n            target = target.parents('.customAction');\r\n\r\n        var alertContainer = $('#' + this.setup.containerId()).find('#alertContainer');\r\n        var action = target.data('action');\r\n        var id = this.model.get('id');\r\n\r\n        var that = this;\r\n        $.ajax(\r\n        {\r\n            url: that.setup.customActionRoute(action, id),\r\n            type: 'get',\r\n            success: function(response)\r\n            {\r\n                Crude.showAlert('success', response.data.message, alertContainer);\r\n                Crude.vent.trigger('action_update', that.setup.getName());\r\n            },\r\n            error: function(response)\r\n            {\r\n                that.setup.onAjaxFail(response, alertContainer);\r\n            }\r\n        });\r\n    },\r\n\r\n    itemSelected: function (setupName)\r\n    {\r\n        if (this.setup.getName() != setupName)\r\n            return;\r\n\r\n        if (this.model.get('id') == Crude.data.selectedItem)\r\n            this.$el.addClass('active');\r\n        else\r\n            this.$el.removeClass('active');\r\n    },\r\n\r\n    delete: function ()\r\n    {\r\n        $(':focus').blur();\r\n\r\n        this.setup.triggerCancel();\r\n\r\n        var $modal = $('#deleteItemConfirmModal');\r\n\r\n        $modal.find('.modal-content').html(\r\n            _.template($('#crude_deleteItemConfirmModalTemplate').html())({\r\n                setup: this.setup\r\n            })\r\n        );\r\n\r\n        $modal.modal('show');\r\n        var alertContainer = $('#' + this.setup.containerId()).find('#alertContainer');\r\n\r\n        $modal.find('#confirm').click(function (event)\r\n        {\r\n            this.model.destroy({wait: true})\r\n                .done(function(response) {\r\n                    Crude.vent.trigger('action_update', this.setup.getName());\r\n\r\n                    if ('message' in  response)\r\n                        Crude.showAlert('success', response.data.message, alertContainer);\r\n\r\n                    $modal.modal('hide');\r\n                }.bind(this))\r\n                .fail(function(response) {\r\n                    var responseTextJSON = JSON.parse(response.responseText);\r\n\r\n                    if (response.status == 422) {\r\n                        errors = _.values(responseTextJSON).join('<br>');\r\n                        Crude.showAlert('danger', errors, alertContainer);\r\n                    }\r\n\r\n                    if (response.status == 403)\r\n                        Crude.showAlert('danger', responseTextJSON.error.message, alertContainer);\r\n\r\n                    $modal.modal('hide');\r\n                    this.setup.triggerCancel();\r\n                }.bind(this));\r\n        }.bind(this));\r\n    },\r\n});\r\n\r\nCrude.Views.ListEmpty = Backbone.Marionette.ItemView.extend(\r\n{\r\n    template: '#crude_listEmptyTemplate',\r\n    tagName: 'tr',\r\n    className: 'crude-table-body-row',\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n});\r\n\r\nCrude.Views.List = Backbone.Marionette.CompositeView.extend(\r\n{\r\n    template: '#crude_listTemplate',\r\n    childView: Crude.Views.ListItem,\r\n    emptyView: Crude.Views.ListEmpty,\r\n    childViewContainer: '#childViewContainer',\r\n    tagName: 'table',\r\n    className: 'table table-hover crude-table',\r\n\r\n    updateTime: '',\r\n\r\n    ui: {\r\n        updateDelay: '#updateDelay',\r\n        refresh: '#refresh',\r\n\r\n        add: '#add',\r\n        order: '#order',\r\n        sort: '.sort',\r\n        check: '#check',\r\n        selectColumn: '#selectColumn',\r\n\r\n        changeNumRows: '.changeNumRows',\r\n\r\n        changePage: '.changePage',\r\n\r\n        changeSearchAttr: '.changeSearchAttr',\r\n        searchValue: '#searchValue',\r\n        search: '#search',\r\n        selectedSearchAttr: '#selectedSearchAttr',\r\n        clearSearch: '#clearSearch'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.add': 'add',\r\n        'click @ui.order': 'order',\r\n        'click @ui.selectColumn': 'selectColumn',\r\n        'click @ui.sort': 'sort',\r\n        'click @ui.check': 'check',\r\n        'click @ui.changeNumRows': 'changeNumRows',\r\n        'click @ui.changePage': 'changePage',\r\n        'click @ui.changeSearchAttr': 'changeSearchAttr',\r\n        'click @ui.search': 'search',\r\n        'keyup @ui.searchValue': 'searchOnEnter',\r\n        'click @ui.clearSearch': 'clearSearch',\r\n        'click @ui.refresh': 'updateList',\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n\r\n        this.updateTime = Date.now();\r\n\r\n        this.collection = this.setup.getNewCollection();\r\n        this.updateList();\r\n\r\n        this.listenTo(Crude.vent, 'action_update', this.updateThisList);\r\n        this.listenTo(Crude.vent, 'open_add_form', this.add);\r\n        this.listenTo(Crude.vent, 'rich_filters_change', this.richFiltersChange);\r\n    },\r\n\r\n    childViewOptions: function ()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    serializeData: function ()\r\n    {\r\n        return {\r\n            setup: this.setup,\r\n            sort: this.collection.sortAttributes,\r\n            pagination: this.collection.pagination,\r\n            search: this.collection.search\r\n        };\r\n    },\r\n\r\n    onRender: function ()\r\n    {\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n        setInterval(function()\r\n        {\r\n            var delay = Date.now() - this.updateTime;\r\n            delay = parseInt(delay / 1000);\r\n            var s = delay % 60;\r\n            var m = parseInt(delay / 60);\r\n\r\n            s = String(\"00\" + s).slice(-2);\r\n\r\n            this.ui.updateDelay.html( m + ':' + s );\r\n        }.bind(this), 1000);\r\n    },\r\n\r\n    add: function ()\r\n    {\r\n        $(':focus').blur();\r\n\r\n        Crude.data.selectedItem = null;\r\n        this.setup.triggerAction(_.clone(this.setup.get('actions')), this.setup.getNewModel());\r\n    },\r\n\r\n    sort: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n        if (! $target.hasClass('sort'))\r\n            $target = $target.parents('.sort');\r\n\r\n        this.collection.changeSortOptions($target.data('attr'));\r\n        this.updateList();\r\n    },\r\n\r\n    check: function ()\r\n    {\r\n        var list = $('.checkboxColumn' + this.setup.getName());\r\n        var checkedList = $('.checkboxColumn' + this.setup.getName() + ':checked');\r\n\r\n        var shoudCheck = list.length > checkedList.length;\r\n\r\n        list.each(function () {\r\n            $(this).prop('checked', shoudCheck);\r\n        });\r\n    },\r\n\r\n    order: function ()\r\n    {\r\n        $(':focus').blur();\r\n\r\n        this.setup.triggerCancel();\r\n\r\n        var alertContainer = $('#' + this.setup.containerId()).find('#alertContainer');\r\n        var list = this.collection.toJSON();\r\n        var options = this.setup.get('orderParameters');\r\n        list = _.sortBy(list, function(model) {\r\n            return parseInt(model[options.orderAttr]);\r\n        });\r\n\r\n        var template = _.template($('#crude_orderedListModalTemplate').html())({\r\n            list: list,\r\n            options: options,\r\n            setup: this.setup\r\n        });\r\n\r\n        var $modal = $('#orderedListModal');\r\n        $modal.find('#content').html(template);\r\n\r\n        $modal.modal('show');\r\n        $modal.find('#collection').sortable();\r\n\r\n        var orders = _.pluck(list, options.orderAttr);\r\n        orders = _.sortBy(orders, function(num) {\r\n            return parseInt(num);\r\n        });\r\n\r\n        var url = this.setup.orderedListRoute();\r\n        var that = this;\r\n\r\n        $modal.find('#confirm').click(function() {\r\n            var orderList = [];\r\n            var i = 0;\r\n            $modal.find('#collection').find('li').each(function () {\r\n                orderList.push({\r\n                    id: $(this).data('id'),\r\n                    order: orders[i]\r\n                });\r\n                i++;\r\n            });\r\n\r\n            $.ajax({\r\n                url: url,\r\n                type: 'post',\r\n                data: {\r\n                    orderList: orderList\r\n                },\r\n                success: function(response)\r\n                {\r\n                    $modal.modal('hide');\r\n                    Crude.vent.trigger('action_update', that.setup.getName());\r\n                    Crude.showAlert('success', response.data.message, alertContainer);\r\n                },\r\n                error: function(response)\r\n                {\r\n                    $modal.modal('hide');\r\n                    that.setup.onAjaxFail(response, alertContainer);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    selectColumn: function ()\r\n    {\r\n        $(':focus').blur();\r\n\r\n        var template = _.template($('#crude_columnSelectorModalTemplate').html())({\r\n            setup: this.setup\r\n        });\r\n\r\n        var $modal = $('#columnSelectorModal');\r\n        $modal.find('#content').html(template);\r\n        $modal.modal('show');\r\n\r\n        $modal.find('#confirm').click(function() {\r\n            var extraColumn = this.setup.get('extraColumn');\r\n\r\n            $modal.find('.columnCheckbox').each(function () {\r\n                var check = $(this);\r\n                extraColumn[check.data('name')].visible = check.is(':checked');\r\n            });\r\n\r\n            this.setup.set('extraColumn', extraColumn);\r\n\r\n            $modal.modal('hide');\r\n            this.render();\r\n        }.bind(this));\r\n    },\r\n\r\n    changeNumRows: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n        this.collection.pagination.numRows = $target.html();\r\n        this.updateList();\r\n    },\r\n\r\n    changePage: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n        this.collection.pagination.page = $target.html();\r\n        this.updateList();\r\n    },\r\n\r\n    changeSearchAttr: function (event)\r\n    {\r\n        var $target = $(event.target);\r\n\r\n        this.collection.search.attr = $target.data('attr');\r\n        this.ui.selectedSearchAttr.html($target.html());\r\n    },\r\n\r\n    searchOnEnter: function (event)\r\n    {\r\n        if (event.keyCode == 13)\r\n            this.search();\r\n    },\r\n\r\n    search: function ()\r\n    {\r\n        this.collection.search.value = this.ui.searchValue.val();\r\n        this.updateList();\r\n    },\r\n\r\n    clearSearch: function ()\r\n    {\r\n        this.collection.search.attr = 'id',\r\n        this.collection.search.value = '';\r\n        this.updateList();\r\n    },\r\n\r\n    updateList: function ()\r\n    {\r\n        this.collection.fetchWithOptions().done(function (response)\r\n        {\r\n            Crude.vent.trigger('fetched_completed');\r\n            this.updateTime = Date.now();\r\n\r\n            // todo\r\n            // this broke actionToTrigger, refactor needed in order to\r\n            // update crude setup model with list\r\n            // this.setup = new Crude.Models.Setup(response.data.setup);\r\n\r\n            this.render();\r\n        }.bind(this));\r\n    },\r\n\r\n    updateThisList: function (setupName)\r\n    {\r\n        if (this.setup.getName() == setupName || this.setup.config('refreshAll'))\r\n            this.updateList();\r\n    },\r\n\r\n    richFiltersChange: function (setupName, richFilters)\r\n    {\r\n        if (this.setup.getName() == setupName) {\r\n            this.collection.richFilters = richFilters;\r\n            this.updateList();\r\n        }\r\n    }\r\n\r\n});\r\n","Crude.Views.Layout = Backbone.Marionette.LayoutView.extend(\r\n{\r\n    template: '#crude_layoutTemplate',\r\n    tagName:  'div',\r\n    className: '',\r\n\r\n    firstRender: true,\r\n    title: '',\r\n\r\n    regions: {\r\n        'richFilters': '#richFiltersRegion',\r\n        'list': '#listRegion',\r\n        'form': '#formRegion',\r\n        'map': '#mapRegion',\r\n        'file': '#fileRegion',\r\n        'thumbnail': '#thumbnailRegion'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    onRender: function()\r\n    {\r\n        if (this.firstRender) {\r\n            var setup = this.setup;\r\n\r\n            this.list.show(\r\n                new Crude.Views.List({ setup: setup })\r\n            );\r\n\r\n            if (this.setup.isActionAvailable('form'))\r\n                this.form.show(\r\n                    new Crude.Views.FormModule({ setup: setup })\r\n                );\r\n\r\n            if (this.setup.isActionAvailable('file'))\r\n                this.file.show(\r\n                    new Crude.Views.FileModule({ setup: setup })\r\n                );\r\n\r\n            if (this.setup.isActionAvailable('map'))\r\n                this.map.show(\r\n                    new Crude.Views.MapModule({ setup: setup })\r\n                );\r\n\r\n            if (this.setup.isActionAvailable('thumbnail'))\r\n                this.thumbnail.show(\r\n                    new Crude.Views.ThumbnailModule({ setup: setup })\r\n                );\r\n\r\n            if (! _.isEmpty(setup.get('richFilters')))\r\n                this.richFilters.show(\r\n                    new Crude.Views.RichFilterList({ setup: setup })\r\n                );\r\n\r\n            this.firstRender = false;\r\n        }\r\n\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n});\r\n","Crude.Views.FormLayout = Backbone.Marionette.LayoutView.extend(\r\n{\r\n    template: '#crude_formLayoutTemplate',\r\n    tagName:  'div',\r\n    className: '',\r\n\r\n    firstRender: true,\r\n    title: '',\r\n\r\n    regions: {\r\n        'form': '#formRegion',\r\n        'map': '#mapRegion',\r\n        'file': '#fileRegion',\r\n        'thumbnail': '#thumbnailRegion'\r\n    },\r\n\r\n    ui: {\r\n        'save': '#layoutAction #save'\r\n    },\r\n\r\n    events: {\r\n        'click @ui.save': 'save'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n        this.model = this.setup.getNewModel().set(options.modelData);\r\n    },\r\n\r\n    serializeData: function()\r\n    {\r\n        return {\r\n            setup: this.setup,\r\n            model: this.model\r\n        };\r\n    },\r\n\r\n    onRender: function()\r\n    {\r\n        if (this.firstRender) {\r\n            var data = {\r\n                setup: this.setup,\r\n                model: this.model,\r\n                slideUpAllow: false\r\n            };\r\n\r\n            if (this.setup.isActionAvailable('form')) {\r\n                this.form.show(\r\n                    new Crude.Views.FormModule(data)\r\n                );\r\n                $('#formRegion').show();\r\n                $('#formRegion').find('#moduleButtons').hide();\r\n            }\r\n\r\n            if (this.setup.isActionAvailable('file')) {\r\n                this.file.show(\r\n                    new Crude.Views.FileModule(data)\r\n                );\r\n                $('#fileRegion').show();\r\n                $('#fileRegion').find('#moduleButtons').hide();\r\n            }\r\n\r\n            if (this.setup.isActionAvailable('map')) {\r\n                this.map.show(\r\n                    new Crude.Views.MapModule(data)\r\n                );\r\n                $('#mapRegion').show();\r\n                $('#mapRegion').find('#moduleButtons').hide();\r\n            }\r\n\r\n            if (this.setup.isActionAvailable('thumbnail')) {\r\n                this.thumbnail.show(\r\n                    new Crude.Views.ThumbnailModule(data)\r\n                );\r\n                $('#thumbnailRegion').show();\r\n                $('#thumbnailRegion').find('#moduleButtons').hide();\r\n            }\r\n\r\n            this.firstRender = false;\r\n        }\r\n\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n});\r\n","Crude.Views.MapLayout = Backbone.Marionette.LayoutView.extend(\r\n{\r\n    template: '#crude_mapLayoutTemplate',\r\n    tagName:  'div',\r\n    className: '',\r\n\r\n    firstRender: true,\r\n    title: '',\r\n\r\n    regions: {\r\n        map:            '#mapRegion',\r\n        richFilters:    '#richFiltersRegion'\r\n    },\r\n\r\n    initialize: function (options)\r\n    {\r\n        this.setup = options.setup;\r\n    },\r\n\r\n    serializeData: function()\r\n    {\r\n        return {\r\n            setup: this.setup\r\n        };\r\n    },\r\n\r\n    onRender: function()\r\n    {\r\n        if (this.firstRender) {\r\n            var setup = this.setup;\r\n\r\n            this.map.show(\r\n                new Crude.Views.Map({ setup: setup })\r\n            );\r\n\r\n            if (! _.isEmpty(setup.get('richFilters')))\r\n                this.richFilters.show(\r\n                    new Crude.Views.RichFilterList({ setup: setup })\r\n                );\r\n\r\n            this.firstRender = false;\r\n        }\r\n\r\n        // initialize all tooltips on a page\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    },\r\n});\r\n","$(function()\r\n{\r\n    // lists\r\n    var crudeSetup = Crude.getData('crudeSetup', []);\r\n    var $crudeContainer = $('#crudeContainer');\r\n\r\n    _.each(crudeSetup, function(setup)\r\n    {\r\n        var setup = new Crude.Models.Setup(setup);\r\n\r\n        var panelClass = setup.get('panelView') ? ' crude-box-panel' : '';\r\n        var containerId = setup.containerId();\r\n\r\n        $crudeContainer.append(\r\n            '<div id=\"' + containerId + '\" class=\"container crude-box' + panelClass + '\"></div>'\r\n        );\r\n\r\n        var view = new Crude.Views.Layout({\r\n            el: '#' + containerId,\r\n            setup: setup\r\n        });\r\n        view.render();\r\n    });\r\n\r\n    // map\r\n    var crudeMap = Crude.getData('crudeMap', []);\r\n    var $crudeMapContainer = $('#crudeMapContainer');\r\n\r\n    _.each(crudeMap, function(setup)\r\n    {\r\n        var setup = new Crude.Models.Setup(setup);\r\n\r\n        var containerId = setup.mapContainerId();\r\n\r\n        $crudeContainer.append(\r\n            '<div id=\"' + containerId + '\" class=\"container crude-box\"></div>'\r\n        );\r\n\r\n        var view = new Crude.Views.MapLayout({\r\n            el: '#' + containerId,\r\n            setup: setup\r\n        });\r\n        view.render();\r\n    });\r\n\r\n    // forms\r\n    var crudeForm = Crude.getData('crudeForm', []);\r\n    var $crudeFormContainer = $('#crudeFormContainer');\r\n\r\n    _.each(crudeForm, function(form)\r\n    {\r\n        if (! 'setup' in form)\r\n            return;\r\n\r\n        var setup = new Crude.Models.Setup(form.setup);\r\n        var containerId = setup.formContainerId();\r\n        var modelData = 'model' in form ? form.model : {};\r\n\r\n        $crudeFormContainer.append(\r\n            '<div id=\"' + containerId + '\" class=\"container crude-box\"></div>'\r\n        );\r\n\r\n        var view = new Crude.Views.FormLayout({\r\n            el: '#' + containerId,\r\n            setup: setup,\r\n            modelData: modelData\r\n        });\r\n        view.render();\r\n    });\r\n\r\n    // initialize all tooltips on a page\r\n    $('[data-toggle=\"tooltip\"]').tooltip();\r\n});\r\n"]}